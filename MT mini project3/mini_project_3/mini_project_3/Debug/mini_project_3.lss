
mini_project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00002642  000026d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800182  00800182  000027f8  2**0
                  ALLOC
  3 .stab         00001f74  00000000  00000000  000027f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ecc  00000000  00000000  0000476c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000057d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000059ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000915b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a334  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ab 08 	call	0x1156	; 0x1156 <main>
      8a:	0c 94 1f 13 	jmp	0x263e	; 0x263e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e7       	ldi	r22, 0x7A	; 122
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 57       	subi	r30, 0x7E	; 126
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
#include <avr/io.h>




void ADC_init(const ADC_ConfigType *Config_Ptr){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <ADC_init+0x8>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <ADC_init+0xa>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01
ADMUX = 0;/*for initialization*/
     e40:	e7 e2       	ldi	r30, 0x27	; 39
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	10 82       	st	Z, r1

/* Initialize ADC configuration */
desired_adc_config.ref_volt = ADC_REF_INTERNAL_VREF;
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	80 93 86 01 	sts	0x0186, r24
desired_adc_config.prescaler = ADC_PRESCALER_8;
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	80 93 87 01 	sts	0x0187, r24

switch(Config_Ptr->ref_volt)
     e52:	e9 81       	ldd	r30, Y+1	; 0x01
     e54:	fa 81       	ldd	r31, Y+2	; 0x02
     e56:	80 81       	ld	r24, Z
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3e 83       	std	Y+6, r19	; 0x06
     e5e:	2d 83       	std	Y+5, r18	; 0x05
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	9e 81       	ldd	r25, Y+6	; 0x06
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	91 05       	cpc	r25, r1
     e68:	21 f1       	breq	.+72     	; 0xeb2 <ADC_init+0x84>
     e6a:	2d 81       	ldd	r18, Y+5	; 0x05
     e6c:	3e 81       	ldd	r19, Y+6	; 0x06
     e6e:	22 30       	cpi	r18, 0x02	; 2
     e70:	31 05       	cpc	r19, r1
     e72:	2c f4       	brge	.+10     	; 0xe7e <ADC_init+0x50>
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	9e 81       	ldd	r25, Y+6	; 0x06
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	61 f0       	breq	.+24     	; 0xe94 <ADC_init+0x66>
     e7c:	5e c0       	rjmp	.+188    	; 0xf3a <ADC_init+0x10c>
     e7e:	2d 81       	ldd	r18, Y+5	; 0x05
     e80:	3e 81       	ldd	r19, Y+6	; 0x06
     e82:	22 30       	cpi	r18, 0x02	; 2
     e84:	31 05       	cpc	r19, r1
     e86:	81 f1       	breq	.+96     	; 0xee8 <ADC_init+0xba>
     e88:	8d 81       	ldd	r24, Y+5	; 0x05
     e8a:	9e 81       	ldd	r25, Y+6	; 0x06
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	91 05       	cpc	r25, r1
     e90:	d1 f1       	breq	.+116    	; 0xf06 <ADC_init+0xd8>
     e92:	53 c0       	rjmp	.+166    	; 0xf3a <ADC_init+0x10c>
	{
	case ADC_REF_AREF:
		CLEAR_BIT(ADMUX,REFS0);
     e94:	a7 e2       	ldi	r26, 0x27	; 39
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e7 e2       	ldi	r30, 0x27	; 39
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8f 7b       	andi	r24, 0xBF	; 191
     ea0:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,REFS1);
     ea2:	a7 e2       	ldi	r26, 0x27	; 39
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e7 e2       	ldi	r30, 0x27	; 39
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 77       	andi	r24, 0x7F	; 127
     eae:	8c 93       	st	X, r24
     eb0:	44 c0       	rjmp	.+136    	; 0xf3a <ADC_init+0x10c>
	break;

	case ADC_REF_AVCC:
		SET_BIT(ADMUX,REFS0);/*to choose internal 2.56v reference voltage*/
     eb2:	a7 e2       	ldi	r26, 0x27	; 39
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e7 e2       	ldi	r30, 0x27	; 39
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 64       	ori	r24, 0x40	; 64
     ebe:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,REFS1);
     ec0:	a7 e2       	ldi	r26, 0x27	; 39
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e7 e2       	ldi	r30, 0x27	; 39
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8f 77       	andi	r24, 0x7F	; 127
     ecc:	8c 93       	st	X, r24
		ADC_REF_VOLTAGE=5;
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a0 ea       	ldi	r26, 0xA0	; 160
     ed4:	b0 e4       	ldi	r27, 0x40	; 64
     ed6:	80 93 82 01 	sts	0x0182, r24
     eda:	90 93 83 01 	sts	0x0183, r25
     ede:	a0 93 84 01 	sts	0x0184, r26
     ee2:	b0 93 85 01 	sts	0x0185, r27
     ee6:	29 c0       	rjmp	.+82     	; 0xf3a <ADC_init+0x10c>
	break;

	case ADC_REF_RESERVED:
		CLEAR_BIT(ADMUX,REFS0);
     ee8:	a7 e2       	ldi	r26, 0x27	; 39
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e7 e2       	ldi	r30, 0x27	; 39
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8f 7b       	andi	r24, 0xBF	; 191
     ef4:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS1);
     ef6:	a7 e2       	ldi	r26, 0x27	; 39
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e7 e2       	ldi	r30, 0x27	; 39
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 68       	ori	r24, 0x80	; 128
     f02:	8c 93       	st	X, r24
     f04:	1a c0       	rjmp	.+52     	; 0xf3a <ADC_init+0x10c>
	break;

	case ADC_REF_INTERNAL_VREF:
		SET_BIT(ADMUX,REFS0);/*to choose internal 2.56v reference voltage*/
     f06:	a7 e2       	ldi	r26, 0x27	; 39
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e7 e2       	ldi	r30, 0x27	; 39
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 64       	ori	r24, 0x40	; 64
     f12:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS1);
     f14:	a7 e2       	ldi	r26, 0x27	; 39
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e7 e2       	ldi	r30, 0x27	; 39
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	8c 93       	st	X, r24
		ADC_REF_VOLTAGE=2.56;
     f22:	8a e0       	ldi	r24, 0x0A	; 10
     f24:	97 ed       	ldi	r25, 0xD7	; 215
     f26:	a3 e2       	ldi	r26, 0x23	; 35
     f28:	b0 e4       	ldi	r27, 0x40	; 64
     f2a:	80 93 82 01 	sts	0x0182, r24
     f2e:	90 93 83 01 	sts	0x0183, r25
     f32:	a0 93 84 01 	sts	0x0184, r26
     f36:	b0 93 85 01 	sts	0x0185, r27
	break;
	}


SET_BIT(ADCSRA,ADEN);/*enable ADC*/
     f3a:	a6 e2       	ldi	r26, 0x26	; 38
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e6 e2       	ldi	r30, 0x26	; 38
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 68       	ori	r24, 0x80	; 128
     f46:	8c 93       	st	X, r24

switch(Config_Ptr->prescaler)
     f48:	e9 81       	ldd	r30, Y+1	; 0x01
     f4a:	fa 81       	ldd	r31, Y+2	; 0x02
     f4c:	81 81       	ldd	r24, Z+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	3c 83       	std	Y+4, r19	; 0x04
     f54:	2b 83       	std	Y+3, r18	; 0x03
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	91 05       	cpc	r25, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <ADC_init+0x134>
     f60:	6a c0       	rjmp	.+212    	; 0x1036 <ADC_init+0x208>
     f62:	2b 81       	ldd	r18, Y+3	; 0x03
     f64:	3c 81       	ldd	r19, Y+4	; 0x04
     f66:	24 30       	cpi	r18, 0x04	; 4
     f68:	31 05       	cpc	r19, r1
     f6a:	84 f4       	brge	.+32     	; 0xf8c <ADC_init+0x15e>
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	a1 f1       	breq	.+104    	; 0xfde <ADC_init+0x1b0>
     f76:	2b 81       	ldd	r18, Y+3	; 0x03
     f78:	3c 81       	ldd	r19, Y+4	; 0x04
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	0c f0       	brlt	.+2      	; 0xf82 <ADC_init+0x154>
     f80:	44 c0       	rjmp	.+136    	; 0x100a <ADC_init+0x1dc>
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	a1 f0       	breq	.+40     	; 0xfb2 <ADC_init+0x184>
     f8a:	ac c0       	rjmp	.+344    	; 0x10e4 <ADC_init+0x2b6>
     f8c:	2b 81       	ldd	r18, Y+3	; 0x03
     f8e:	3c 81       	ldd	r19, Y+4	; 0x04
     f90:	25 30       	cpi	r18, 0x05	; 5
     f92:	31 05       	cpc	r19, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <ADC_init+0x16a>
     f96:	7b c0       	rjmp	.+246    	; 0x108e <ADC_init+0x260>
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	85 30       	cpi	r24, 0x05	; 5
     f9e:	91 05       	cpc	r25, r1
     fa0:	0c f4       	brge	.+2      	; 0xfa4 <ADC_init+0x176>
     fa2:	5f c0       	rjmp	.+190    	; 0x1062 <ADC_init+0x234>
     fa4:	2b 81       	ldd	r18, Y+3	; 0x03
     fa6:	3c 81       	ldd	r19, Y+4	; 0x04
     fa8:	26 30       	cpi	r18, 0x06	; 6
     faa:	31 05       	cpc	r19, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <ADC_init+0x182>
     fae:	85 c0       	rjmp	.+266    	; 0x10ba <ADC_init+0x28c>
     fb0:	99 c0       	rjmp	.+306    	; 0x10e4 <ADC_init+0x2b6>
		{
	case ADC_PRESCALER_2:
		/*Setting pre-scaler to 8*/
		CLEAR_BIT(ADCSRA,ADPS2);
     fb2:	a6 e2       	ldi	r26, 0x26	; 38
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e6 e2       	ldi	r30, 0x26	; 38
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8b 7f       	andi	r24, 0xFB	; 251
     fbe:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS1);
     fc0:	a6 e2       	ldi	r26, 0x26	; 38
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e6 e2       	ldi	r30, 0x26	; 38
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8d 7f       	andi	r24, 0xFD	; 253
     fcc:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS0);
     fce:	a6 e2       	ldi	r26, 0x26	; 38
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e6 e2       	ldi	r30, 0x26	; 38
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8e 7f       	andi	r24, 0xFE	; 254
     fda:	8c 93       	st	X, r24
     fdc:	83 c0       	rjmp	.+262    	; 0x10e4 <ADC_init+0x2b6>
	break;

	case ADC_PRESCALER_4:
			/*Setting pre-scaler to 8*/
			CLEAR_BIT(ADCSRA,ADPS2);
     fde:	a6 e2       	ldi	r26, 0x26	; 38
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e6 e2       	ldi	r30, 0x26	; 38
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8b 7f       	andi	r24, 0xFB	; 251
     fea:	8c 93       	st	X, r24
			CLEAR_BIT(ADCSRA,ADPS1);
     fec:	a6 e2       	ldi	r26, 0x26	; 38
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e6 e2       	ldi	r30, 0x26	; 38
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8d 7f       	andi	r24, 0xFD	; 253
     ff8:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADPS0);
     ffa:	a6 e2       	ldi	r26, 0x26	; 38
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e6 e2       	ldi	r30, 0x26	; 38
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	8c 93       	st	X, r24
    1008:	6d c0       	rjmp	.+218    	; 0x10e4 <ADC_init+0x2b6>
	break;

	case ADC_PRESCALER_8:
		/*Setting pre-scaler to 8*/
		CLEAR_BIT(ADCSRA,ADPS2);
    100a:	a6 e2       	ldi	r26, 0x26	; 38
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e6 e2       	ldi	r30, 0x26	; 38
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8b 7f       	andi	r24, 0xFB	; 251
    1016:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    1018:	a6 e2       	ldi	r26, 0x26	; 38
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e6 e2       	ldi	r30, 0x26	; 38
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	82 60       	ori	r24, 0x02	; 2
    1024:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS0);
    1026:	a6 e2       	ldi	r26, 0x26	; 38
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e6 e2       	ldi	r30, 0x26	; 38
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	81 60       	ori	r24, 0x01	; 1
    1032:	8c 93       	st	X, r24
    1034:	57 c0       	rjmp	.+174    	; 0x10e4 <ADC_init+0x2b6>
	break;

	case ADC_PRESCALER_16:
		/*Setting pre-scaler to 8*/
		SET_BIT(ADCSRA,ADPS2);
    1036:	a6 e2       	ldi	r26, 0x26	; 38
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e6 e2       	ldi	r30, 0x26	; 38
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	84 60       	ori	r24, 0x04	; 4
    1042:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS1);
    1044:	a6 e2       	ldi	r26, 0x26	; 38
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e6 e2       	ldi	r30, 0x26	; 38
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8d 7f       	andi	r24, 0xFD	; 253
    1050:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS0);
    1052:	a6 e2       	ldi	r26, 0x26	; 38
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e6 e2       	ldi	r30, 0x26	; 38
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8e 7f       	andi	r24, 0xFE	; 254
    105e:	8c 93       	st	X, r24
    1060:	41 c0       	rjmp	.+130    	; 0x10e4 <ADC_init+0x2b6>
	break;

	case ADC_PRESCALER_32:
			/*Setting pre-scaler to 8*/
			SET_BIT(ADCSRA,ADPS2);
    1062:	a6 e2       	ldi	r26, 0x26	; 38
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e6 e2       	ldi	r30, 0x26	; 38
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	84 60       	ori	r24, 0x04	; 4
    106e:	8c 93       	st	X, r24
			CLEAR_BIT(ADCSRA,ADPS1);
    1070:	a6 e2       	ldi	r26, 0x26	; 38
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e6 e2       	ldi	r30, 0x26	; 38
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8d 7f       	andi	r24, 0xFD	; 253
    107c:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADPS0);
    107e:	a6 e2       	ldi	r26, 0x26	; 38
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e6 e2       	ldi	r30, 0x26	; 38
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	81 60       	ori	r24, 0x01	; 1
    108a:	8c 93       	st	X, r24
    108c:	2b c0       	rjmp	.+86     	; 0x10e4 <ADC_init+0x2b6>
	break;

	case ADC_PRESCALER_64:
			/*Setting pre-scaler to 8*/
			SET_BIT(ADCSRA,ADPS2);
    108e:	a6 e2       	ldi	r26, 0x26	; 38
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e6 e2       	ldi	r30, 0x26	; 38
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	84 60       	ori	r24, 0x04	; 4
    109a:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADPS1);
    109c:	a6 e2       	ldi	r26, 0x26	; 38
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e6 e2       	ldi	r30, 0x26	; 38
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	82 60       	ori	r24, 0x02	; 2
    10a8:	8c 93       	st	X, r24
			CLEAR_BIT(ADCSRA,ADPS0);
    10aa:	a6 e2       	ldi	r26, 0x26	; 38
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e6 e2       	ldi	r30, 0x26	; 38
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8e 7f       	andi	r24, 0xFE	; 254
    10b6:	8c 93       	st	X, r24
    10b8:	15 c0       	rjmp	.+42     	; 0x10e4 <ADC_init+0x2b6>
	break;

	case ADC_PRESCALER_128:
			/*Setting pre-scaler to 8*/
			SET_BIT(ADCSRA,ADPS2);
    10ba:	a6 e2       	ldi	r26, 0x26	; 38
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e6 e2       	ldi	r30, 0x26	; 38
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	84 60       	ori	r24, 0x04	; 4
    10c6:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADPS1);
    10c8:	a6 e2       	ldi	r26, 0x26	; 38
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e6 e2       	ldi	r30, 0x26	; 38
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	82 60       	ori	r24, 0x02	; 2
    10d4:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADPS0);
    10d6:	a6 e2       	ldi	r26, 0x26	; 38
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e6 e2       	ldi	r30, 0x26	; 38
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	81 60       	ori	r24, 0x01	; 1
    10e2:	8c 93       	st	X, r24
	break;
		}


}
    10e4:	26 96       	adiw	r28, 0x06	; 6
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <ADC_readChannel>:
uint16 ADC_readChannel(uint8 channel_num){//the needed pin as anolgue input pin is send to this fucntion
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	0f 92       	push	r0
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	89 83       	std	Y+1, r24	; 0x01
	// the line sets the appropriate bits in ADMUX to select the desired ADC channel for conversion.
	ADMUX=((ADMUX&0xE0)|(channel_num&0x0E));//insert channel num to the ADMUX0:4 bits
    1102:	a7 e2       	ldi	r26, 0x27	; 39
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e7 e2       	ldi	r30, 0x27	; 39
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	98 2f       	mov	r25, r24
    110e:	90 7e       	andi	r25, 0xE0	; 224
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	8e 70       	andi	r24, 0x0E	; 14
    1114:	89 2b       	or	r24, r25
    1116:	8c 93       	st	X, r24
		//11100000=0xE0 clear the first 5 bits in ADMUX register
		SET_BIT(ADCSRA,ADSC);//start conversion
    1118:	a6 e2       	ldi	r26, 0x26	; 38
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e6 e2       	ldi	r30, 0x26	; 38
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	80 64       	ori	r24, 0x40	; 64
    1124:	8c 93       	st	X, r24
		while(!(ADCSRA&(1<<ADIF))){//Polling until ADIF=1 (conevrsion is completed)
    1126:	e6 e2       	ldi	r30, 0x26	; 38
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	80 71       	andi	r24, 0x10	; 16
    1132:	90 70       	andi	r25, 0x00	; 0
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	b9 f3       	breq	.-18     	; 0x1126 <ADC_readChannel+0x30>
		}
		SET_BIT(ADCSRA,ADIF);//clear it to start again
    1138:	a6 e2       	ldi	r26, 0x26	; 38
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e6 e2       	ldi	r30, 0x26	; 38
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 61       	ori	r24, 0x10	; 16
    1144:	8c 93       	st	X, r24
		return ADC;//gives back the output that is inside ADC REGISTER
    1146:	e4 e2       	ldi	r30, 0x24	; 36
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	91 81       	ldd	r25, Z+1	; 0x01

}
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <main>:
 *      Author: dell
 */
#include "lcd.h"
#include "temp_sensor_mine.h"
#include "motor_mine.h"
int main(){
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <main+0x6>
    115c:	0f 92       	push	r0
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	uint8 measered_temp;
	uint8 duty_cycle;
	DcMotor_State fan_state=MOTOR_OFF;
    1162:	19 82       	std	Y+1, r1	; 0x01
	LCD_init();
    1164:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_init>

	DcMotor_Init();
    1168:	0e 94 98 11 	call	0x2330	; 0x2330 <DcMotor_Init>
	/**  LCD screen display**/
	LCD_moveCursor(0,2);
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	62 e0       	ldi	r22, 0x02	; 2
    1170:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_moveCursor>
	LCD_displayString("FAN IS ");
    1174:	80 e6       	ldi	r24, 0x60	; 96
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 e7 10 	call	0x21ce	; 0x21ce <LCD_displayString>
	LCD_moveCursor(1,2);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	62 e0       	ldi	r22, 0x02	; 2
    1180:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_moveCursor>
	LCD_displayString("TEMP=    C");
    1184:	88 e6       	ldi	r24, 0x68	; 104
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 e7 10 	call	0x21ce	; 0x21ce <LCD_displayString>

	while(1)
{

	if(measered_temp<30){
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	8e 31       	cpi	r24, 0x1E	; 30
    1190:	38 f4       	brcc	.+14     	; 0x11a0 <main+0x4a>
		fan_state=MOTOR_OFF;
    1192:	19 82       	std	Y+1, r1	; 0x01
		duty_cycle=0;
    1194:	1a 82       	std	Y+2, r1	; 0x02
		DcMotor_Rotate(fan_state,duty_cycle);
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	6a 81       	ldd	r22, Y+2	; 0x02
    119a:	0e 94 b3 11 	call	0x2366	; 0x2366 <DcMotor_Rotate>
    119e:	26 c0       	rjmp	.+76     	; 0x11ec <main+0x96>
	}
	else{
		fan_state=MOTOR_CW;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	89 83       	std	Y+1, r24	; 0x01
		if(measered_temp>=30 && measered_temp<60 ){
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	8e 31       	cpi	r24, 0x1E	; 30
    11a8:	30 f0       	brcs	.+12     	; 0x11b6 <main+0x60>
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	8c 33       	cpi	r24, 0x3C	; 60
    11ae:	18 f4       	brcc	.+6      	; 0x11b6 <main+0x60>
			duty_cycle=25;/*to get 25% of the motor speed*/
    11b0:	89 e1       	ldi	r24, 0x19	; 25
    11b2:	8a 83       	std	Y+2, r24	; 0x02
    11b4:	17 c0       	rjmp	.+46     	; 0x11e4 <main+0x8e>
		}
		else if(measered_temp>=60 && measered_temp<90){
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	8c 33       	cpi	r24, 0x3C	; 60
    11ba:	30 f0       	brcs	.+12     	; 0x11c8 <main+0x72>
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	8a 35       	cpi	r24, 0x5A	; 90
    11c0:	18 f4       	brcc	.+6      	; 0x11c8 <main+0x72>
			duty_cycle=50;/*to get 50% of the motor speed*/
    11c2:	82 e3       	ldi	r24, 0x32	; 50
    11c4:	8a 83       	std	Y+2, r24	; 0x02
    11c6:	0e c0       	rjmp	.+28     	; 0x11e4 <main+0x8e>
		}
		else if(measered_temp>=90 && measered_temp<120){
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	8a 35       	cpi	r24, 0x5A	; 90
    11cc:	30 f0       	brcs	.+12     	; 0x11da <main+0x84>
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	88 37       	cpi	r24, 0x78	; 120
    11d2:	18 f4       	brcc	.+6      	; 0x11da <main+0x84>
			duty_cycle=75;/*to get 75% of the motor speed*/
    11d4:	8b e4       	ldi	r24, 0x4B	; 75
    11d6:	8a 83       	std	Y+2, r24	; 0x02
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <main+0x8e>
		}
		else if(measered_temp>120){
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	89 37       	cpi	r24, 0x79	; 121
    11de:	10 f0       	brcs	.+4      	; 0x11e4 <main+0x8e>
			duty_cycle=100;/*to get 100% of the motor speed*/
    11e0:	84 e6       	ldi	r24, 0x64	; 100
    11e2:	8a 83       	std	Y+2, r24	; 0x02
		}
		DcMotor_Rotate(fan_state,duty_cycle);
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	6a 81       	ldd	r22, Y+2	; 0x02
    11e8:	0e 94 b3 11 	call	0x2366	; 0x2366 <DcMotor_Rotate>
	}


			/***** LCD screen variable display ******/
	/*FAN STATE*/
	LCD_moveCursor(0,9);
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	69 e0       	ldi	r22, 0x09	; 9
    11f0:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_moveCursor>
		if(fan_state==MOTOR_OFF){
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	88 23       	and	r24, r24
    11f8:	29 f4       	brne	.+10     	; 0x1204 <main+0xae>
			LCD_displayString("OFF");
    11fa:	83 e7       	ldi	r24, 0x73	; 115
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 e7 10 	call	0x21ce	; 0x21ce <LCD_displayString>
    1202:	07 c0       	rjmp	.+14     	; 0x1212 <main+0xbc>
		}
		else{
			LCD_displayString("ON");
    1204:	87 e7       	ldi	r24, 0x77	; 119
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 e7 10 	call	0x21ce	; 0x21ce <LCD_displayString>
			LCD_displayCharacter(' ');
    120c:	80 e2       	ldi	r24, 0x20	; 32
    120e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <LCD_displayCharacter>
		}
	/*TEMPRATURE STATE*/
	LCD_moveCursor(1,7);
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	67 e0       	ldi	r22, 0x07	; 7
    1216:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_moveCursor>
		measered_temp=get_temp();
    121a:	0e 94 23 12 	call	0x2446	; 0x2446 <get_temp>
    121e:	8b 83       	std	Y+3, r24	; 0x03
		if(measered_temp >= 100)
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	84 36       	cpi	r24, 0x64	; 100
    1224:	30 f0       	brcs	.+12     	; 0x1232 <main+0xdc>
				{
					LCD_intgerToString(measered_temp);
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_intgerToString>
    1230:	ad cf       	rjmp	.-166    	; 0x118c <main+0x36>
				}
				else
				{
					LCD_intgerToString(measered_temp);
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_intgerToString>
					/* In case the digital value is two or one digits print space in the next digit place */
					LCD_displayCharacter(' ');
    123c:	80 e2       	ldi	r24, 0x20	; 32
    123e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <LCD_displayCharacter>
    1242:	a4 cf       	rjmp	.-184    	; 0x118c <main+0x36>

00001244 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <GPIO_setupPinDirection+0x6>
    124a:	00 d0       	rcall	.+0      	; 0x124c <GPIO_setupPinDirection+0x8>
    124c:	0f 92       	push	r0
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	6a 83       	std	Y+2, r22	; 0x02
    1256:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	88 30       	cpi	r24, 0x08	; 8
    125c:	08 f0       	brcs	.+2      	; 0x1260 <GPIO_setupPinDirection+0x1c>
    125e:	d5 c0       	rjmp	.+426    	; 0x140a <GPIO_setupPinDirection+0x1c6>
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	84 30       	cpi	r24, 0x04	; 4
    1264:	08 f0       	brcs	.+2      	; 0x1268 <GPIO_setupPinDirection+0x24>
    1266:	d1 c0       	rjmp	.+418    	; 0x140a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	3d 83       	std	Y+5, r19	; 0x05
    1270:	2c 83       	std	Y+4, r18	; 0x04
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	91 05       	cpc	r25, r1
    127a:	09 f4       	brne	.+2      	; 0x127e <GPIO_setupPinDirection+0x3a>
    127c:	43 c0       	rjmp	.+134    	; 0x1304 <GPIO_setupPinDirection+0xc0>
    127e:	2c 81       	ldd	r18, Y+4	; 0x04
    1280:	3d 81       	ldd	r19, Y+5	; 0x05
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	2c f4       	brge	.+10     	; 0x1292 <GPIO_setupPinDirection+0x4e>
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	9d 81       	ldd	r25, Y+5	; 0x05
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	71 f0       	breq	.+28     	; 0x12ac <GPIO_setupPinDirection+0x68>
    1290:	bc c0       	rjmp	.+376    	; 0x140a <GPIO_setupPinDirection+0x1c6>
    1292:	2c 81       	ldd	r18, Y+4	; 0x04
    1294:	3d 81       	ldd	r19, Y+5	; 0x05
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	31 05       	cpc	r19, r1
    129a:	09 f4       	brne	.+2      	; 0x129e <GPIO_setupPinDirection+0x5a>
    129c:	5f c0       	rjmp	.+190    	; 0x135c <GPIO_setupPinDirection+0x118>
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	9d 81       	ldd	r25, Y+5	; 0x05
    12a2:	83 30       	cpi	r24, 0x03	; 3
    12a4:	91 05       	cpc	r25, r1
    12a6:	09 f4       	brne	.+2      	; 0x12aa <GPIO_setupPinDirection+0x66>
    12a8:	85 c0       	rjmp	.+266    	; 0x13b4 <GPIO_setupPinDirection+0x170>
    12aa:	af c0       	rjmp	.+350    	; 0x140a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	a1 f4       	brne	.+40     	; 0x12da <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    12b2:	aa e3       	ldi	r26, 0x3A	; 58
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	ea e3       	ldi	r30, 0x3A	; 58
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <GPIO_setupPinDirection+0x8c>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <GPIO_setupPinDirection+0x88>
    12d4:	84 2b       	or	r24, r20
    12d6:	8c 93       	st	X, r24
    12d8:	98 c0       	rjmp	.+304    	; 0x140a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    12da:	aa e3       	ldi	r26, 0x3A	; 58
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	ea e3       	ldi	r30, 0x3A	; 58
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <GPIO_setupPinDirection+0xb4>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <GPIO_setupPinDirection+0xb0>
    12fc:	80 95       	com	r24
    12fe:	84 23       	and	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	83 c0       	rjmp	.+262    	; 0x140a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	a1 f4       	brne	.+40     	; 0x1332 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    130a:	a7 e3       	ldi	r26, 0x37	; 55
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e7 e3       	ldi	r30, 0x37	; 55
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <GPIO_setupPinDirection+0xe4>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <GPIO_setupPinDirection+0xe0>
    132c:	84 2b       	or	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	6c c0       	rjmp	.+216    	; 0x140a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1332:	a7 e3       	ldi	r26, 0x37	; 55
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e7 e3       	ldi	r30, 0x37	; 55
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <GPIO_setupPinDirection+0x10c>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <GPIO_setupPinDirection+0x108>
    1354:	80 95       	com	r24
    1356:	84 23       	and	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	57 c0       	rjmp	.+174    	; 0x140a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	a1 f4       	brne	.+40     	; 0x138a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1362:	a4 e3       	ldi	r26, 0x34	; 52
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e4 e3       	ldi	r30, 0x34	; 52
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_setupPinDirection+0x13c>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_setupPinDirection+0x138>
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	40 c0       	rjmp	.+128    	; 0x140a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    138a:	a4 e3       	ldi	r26, 0x34	; 52
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e4 e3       	ldi	r30, 0x34	; 52
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <GPIO_setupPinDirection+0x164>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <GPIO_setupPinDirection+0x160>
    13ac:	80 95       	com	r24
    13ae:	84 23       	and	r24, r20
    13b0:	8c 93       	st	X, r24
    13b2:	2b c0       	rjmp	.+86     	; 0x140a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	a1 f4       	brne	.+40     	; 0x13e2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    13ba:	a1 e3       	ldi	r26, 0x31	; 49
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e1 e3       	ldi	r30, 0x31	; 49
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <GPIO_setupPinDirection+0x194>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <GPIO_setupPinDirection+0x190>
    13dc:	84 2b       	or	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	14 c0       	rjmp	.+40     	; 0x140a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    13e2:	a1 e3       	ldi	r26, 0x31	; 49
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e1 e3       	ldi	r30, 0x31	; 49
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <GPIO_setupPinDirection+0x1bc>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <GPIO_setupPinDirection+0x1b8>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <GPIO_writePin+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <GPIO_writePin+0x8>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	6a 83       	std	Y+2, r22	; 0x02
    142c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	88 30       	cpi	r24, 0x08	; 8
    1432:	08 f0       	brcs	.+2      	; 0x1436 <GPIO_writePin+0x1c>
    1434:	d5 c0       	rjmp	.+426    	; 0x15e0 <GPIO_writePin+0x1c6>
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	08 f0       	brcs	.+2      	; 0x143e <GPIO_writePin+0x24>
    143c:	d1 c0       	rjmp	.+418    	; 0x15e0 <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else{
		switch(port_num)
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3d 83       	std	Y+5, r19	; 0x05
    1446:	2c 83       	std	Y+4, r18	; 0x04
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <GPIO_writePin+0x3a>
    1452:	43 c0       	rjmp	.+134    	; 0x14da <GPIO_writePin+0xc0>
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	3d 81       	ldd	r19, Y+5	; 0x05
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	2c f4       	brge	.+10     	; 0x1468 <GPIO_writePin+0x4e>
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	71 f0       	breq	.+28     	; 0x1482 <GPIO_writePin+0x68>
    1466:	bc c0       	rjmp	.+376    	; 0x15e0 <GPIO_writePin+0x1c6>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	31 05       	cpc	r19, r1
    1470:	09 f4       	brne	.+2      	; 0x1474 <GPIO_writePin+0x5a>
    1472:	5f c0       	rjmp	.+190    	; 0x1532 <GPIO_writePin+0x118>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <GPIO_writePin+0x66>
    147e:	85 c0       	rjmp	.+266    	; 0x158a <GPIO_writePin+0x170>
    1480:	af c0       	rjmp	.+350    	; 0x15e0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH){
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	a1 f4       	brne	.+40     	; 0x14b0 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1488:	ab e3       	ldi	r26, 0x3B	; 59
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	eb e3       	ldi	r30, 0x3B	; 59
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <GPIO_writePin+0x8c>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <GPIO_writePin+0x88>
    14aa:	84 2b       	or	r24, r20
    14ac:	8c 93       	st	X, r24
    14ae:	98 c0       	rjmp	.+304    	; 0x15e0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    14b0:	ab e3       	ldi	r26, 0x3B	; 59
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	eb e3       	ldi	r30, 0x3B	; 59
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <GPIO_writePin+0xb4>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <GPIO_writePin+0xb0>
    14d2:	80 95       	com	r24
    14d4:	84 23       	and	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	83 c0       	rjmp	.+262    	; 0x15e0 <GPIO_writePin+0x1c6>
			}
		break;
		case PORTB_ID:
			if(value==LOGIC_HIGH){
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	a1 f4       	brne	.+40     	; 0x1508 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    14e0:	a8 e3       	ldi	r26, 0x38	; 56
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e8 e3       	ldi	r30, 0x38	; 56
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <GPIO_writePin+0xe4>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <GPIO_writePin+0xe0>
    1502:	84 2b       	or	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	6c c0       	rjmp	.+216    	; 0x15e0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1508:	a8 e3       	ldi	r26, 0x38	; 56
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e8 e3       	ldi	r30, 0x38	; 56
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <GPIO_writePin+0x10c>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <GPIO_writePin+0x108>
    152a:	80 95       	com	r24
    152c:	84 23       	and	r24, r20
    152e:	8c 93       	st	X, r24
    1530:	57 c0       	rjmp	.+174    	; 0x15e0 <GPIO_writePin+0x1c6>
			}
		break;
		case PORTC_ID:
			if(value==LOGIC_HIGH){
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	a1 f4       	brne	.+40     	; 0x1560 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1538:	a5 e3       	ldi	r26, 0x35	; 53
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e5 e3       	ldi	r30, 0x35	; 53
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <GPIO_writePin+0x13c>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <GPIO_writePin+0x138>
    155a:	84 2b       	or	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	40 c0       	rjmp	.+128    	; 0x15e0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1560:	a5 e3       	ldi	r26, 0x35	; 53
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e3       	ldi	r30, 0x35	; 53
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 2e       	mov	r0, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <GPIO_writePin+0x164>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <GPIO_writePin+0x160>
    1582:	80 95       	com	r24
    1584:	84 23       	and	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	2b c0       	rjmp	.+86     	; 0x15e0 <GPIO_writePin+0x1c6>
			}
		break;
		case PORTD_ID:
			if(value==LOGIC_HIGH){
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	a1 f4       	brne	.+40     	; 0x15b8 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1590:	a2 e3       	ldi	r26, 0x32	; 50
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e2 e3       	ldi	r30, 0x32	; 50
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	48 2f       	mov	r20, r24
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 2e       	mov	r0, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <GPIO_writePin+0x194>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <GPIO_writePin+0x190>
    15b2:	84 2b       	or	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	14 c0       	rjmp	.+40     	; 0x15e0 <GPIO_writePin+0x1c6>
			}
			else
			{
		  CLEAR_BIT(PORTD,pin_num);
    15b8:	a2 e3       	ldi	r26, 0x32	; 50
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e2 e3       	ldi	r30, 0x32	; 50
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <GPIO_writePin+0x1bc>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <GPIO_writePin+0x1b8>
    15da:	80 95       	com	r24
    15dc:	84 23       	and	r24, r20
    15de:	8c 93       	st	X, r24
		break;
		}
		}

	return;
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <GPIO_readPin+0x6>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <GPIO_readPin+0x8>
    15f8:	0f 92       	push	r0
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	88 30       	cpi	r24, 0x08	; 8
    1606:	18 f4       	brcc	.+6      	; 0x160e <GPIO_readPin+0x1e>
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	84 30       	cpi	r24, 0x04	; 4
    160c:	18 f0       	brcs	.+6      	; 0x1614 <GPIO_readPin+0x24>
		{
		/*do nothing*/
		return -1;
    160e:	2f ef       	ldi	r18, 0xFF	; 255
    1610:	2d 83       	std	Y+5, r18	; 0x05
    1612:	82 c0       	rjmp	.+260    	; 0x1718 <GPIO_readPin+0x128>
		}
	else{
		switch(port_num)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	48 2f       	mov	r20, r24
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	5c 83       	std	Y+4, r21	; 0x04
    161c:	4b 83       	std	Y+3, r20	; 0x03
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	79 f1       	breq	.+94     	; 0x1686 <GPIO_readPin+0x96>
    1628:	2b 81       	ldd	r18, Y+3	; 0x03
    162a:	3c 81       	ldd	r19, Y+4	; 0x04
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	34 f4       	brge	.+12     	; 0x163e <GPIO_readPin+0x4e>
    1632:	4b 81       	ldd	r20, Y+3	; 0x03
    1634:	5c 81       	ldd	r21, Y+4	; 0x04
    1636:	41 15       	cp	r20, r1
    1638:	51 05       	cpc	r21, r1
    163a:	69 f0       	breq	.+26     	; 0x1656 <GPIO_readPin+0x66>
    163c:	6c c0       	rjmp	.+216    	; 0x1716 <GPIO_readPin+0x126>
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	82 30       	cpi	r24, 0x02	; 2
    1644:	91 05       	cpc	r25, r1
    1646:	b9 f1       	breq	.+110    	; 0x16b6 <GPIO_readPin+0xc6>
    1648:	2b 81       	ldd	r18, Y+3	; 0x03
    164a:	3c 81       	ldd	r19, Y+4	; 0x04
    164c:	23 30       	cpi	r18, 0x03	; 3
    164e:	31 05       	cpc	r19, r1
    1650:	09 f4       	brne	.+2      	; 0x1654 <GPIO_readPin+0x64>
    1652:	49 c0       	rjmp	.+146    	; 0x16e6 <GPIO_readPin+0xf6>
    1654:	60 c0       	rjmp	.+192    	; 0x1716 <GPIO_readPin+0x126>
		{
		case PORTA_ID:
			if(PINA & (1<<pin_num)){ //OR IF(BIT_IS_SET(PINA, pin_num)) SINCE BIT_IS_SET(REG,BIT)=( REG & (1<<BIT))
    1656:	e9 e3       	ldi	r30, 0x39	; 57
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a9 01       	movw	r20, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <GPIO_readPin+0x7e>
    166a:	55 95       	asr	r21
    166c:	47 95       	ror	r20
    166e:	8a 95       	dec	r24
    1670:	e2 f7       	brpl	.-8      	; 0x166a <GPIO_readPin+0x7a>
    1672:	ca 01       	movw	r24, r20
    1674:	81 70       	andi	r24, 0x01	; 1
    1676:	90 70       	andi	r25, 0x00	; 0
    1678:	88 23       	and	r24, r24
    167a:	19 f0       	breq	.+6      	; 0x1682 <GPIO_readPin+0x92>
				return LOGIC_HIGH;
    167c:	51 e0       	ldi	r21, 0x01	; 1
    167e:	5d 83       	std	Y+5, r21	; 0x05
    1680:	4b c0       	rjmp	.+150    	; 0x1718 <GPIO_readPin+0x128>
			}
			else
			{
				return LOGIC_LOW;
    1682:	1d 82       	std	Y+5, r1	; 0x05
    1684:	49 c0       	rjmp	.+146    	; 0x1718 <GPIO_readPin+0x128>
			}
		break;
		case PORTB_ID:
			if(PINB & (1<<pin_num)){
    1686:	e6 e3       	ldi	r30, 0x36	; 54
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	88 2f       	mov	r24, r24
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a9 01       	movw	r20, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <GPIO_readPin+0xae>
    169a:	55 95       	asr	r21
    169c:	47 95       	ror	r20
    169e:	8a 95       	dec	r24
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <GPIO_readPin+0xaa>
    16a2:	ca 01       	movw	r24, r20
    16a4:	81 70       	andi	r24, 0x01	; 1
    16a6:	90 70       	andi	r25, 0x00	; 0
    16a8:	88 23       	and	r24, r24
    16aa:	19 f0       	breq	.+6      	; 0x16b2 <GPIO_readPin+0xc2>
			return LOGIC_HIGH;
    16ac:	51 e0       	ldi	r21, 0x01	; 1
    16ae:	5d 83       	std	Y+5, r21	; 0x05
    16b0:	33 c0       	rjmp	.+102    	; 0x1718 <GPIO_readPin+0x128>
			}
			else
			{
			return LOGIC_LOW;
    16b2:	1d 82       	std	Y+5, r1	; 0x05
    16b4:	31 c0       	rjmp	.+98     	; 0x1718 <GPIO_readPin+0x128>
			}
		break;
		case PORTC_ID:
			if(PINC & (1<<pin_num)){
    16b6:	e3 e3       	ldi	r30, 0x33	; 51
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	a9 01       	movw	r20, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <GPIO_readPin+0xde>
    16ca:	55 95       	asr	r21
    16cc:	47 95       	ror	r20
    16ce:	8a 95       	dec	r24
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <GPIO_readPin+0xda>
    16d2:	ca 01       	movw	r24, r20
    16d4:	81 70       	andi	r24, 0x01	; 1
    16d6:	90 70       	andi	r25, 0x00	; 0
    16d8:	88 23       	and	r24, r24
    16da:	19 f0       	breq	.+6      	; 0x16e2 <GPIO_readPin+0xf2>
				return LOGIC_HIGH;
    16dc:	51 e0       	ldi	r21, 0x01	; 1
    16de:	5d 83       	std	Y+5, r21	; 0x05
    16e0:	1b c0       	rjmp	.+54     	; 0x1718 <GPIO_readPin+0x128>
			}
			else
			{
				return LOGIC_LOW;
    16e2:	1d 82       	std	Y+5, r1	; 0x05
    16e4:	19 c0       	rjmp	.+50     	; 0x1718 <GPIO_readPin+0x128>
			}
		break;
		case PORTD_ID:
			if(PIND & (1<<pin_num)){
    16e6:	e0 e3       	ldi	r30, 0x30	; 48
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <GPIO_readPin+0x10e>
    16fa:	55 95       	asr	r21
    16fc:	47 95       	ror	r20
    16fe:	8a 95       	dec	r24
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <GPIO_readPin+0x10a>
    1702:	ca 01       	movw	r24, r20
    1704:	81 70       	andi	r24, 0x01	; 1
    1706:	90 70       	andi	r25, 0x00	; 0
    1708:	88 23       	and	r24, r24
    170a:	19 f0       	breq	.+6      	; 0x1712 <GPIO_readPin+0x122>
				return LOGIC_HIGH;
    170c:	51 e0       	ldi	r21, 0x01	; 1
    170e:	5d 83       	std	Y+5, r21	; 0x05
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <GPIO_readPin+0x128>
			}
			else
			{
		return LOGIC_LOW;
    1712:	1d 82       	std	Y+5, r1	; 0x05
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <GPIO_readPin+0x128>
			}
			break;
		default:
			return LOGIC_LOW;
    1716:	1d 82       	std	Y+5, r1	; 0x05
    1718:	8d 81       	ldd	r24, Y+5	; 0x05
		}
		}
}
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	00 d0       	rcall	.+0      	; 0x1730 <GPIO_setupPortDirection+0x6>
    1730:	00 d0       	rcall	.+0      	; 0x1732 <GPIO_setupPortDirection+0x8>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	84 30       	cpi	r24, 0x04	; 4
    173e:	90 f5       	brcc	.+100    	; 0x17a4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	3c 83       	std	Y+4, r19	; 0x04
    1748:	2b 83       	std	Y+3, r18	; 0x03
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	d1 f0       	breq	.+52     	; 0x1788 <GPIO_setupPortDirection+0x5e>
    1754:	2b 81       	ldd	r18, Y+3	; 0x03
    1756:	3c 81       	ldd	r19, Y+4	; 0x04
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	2c f4       	brge	.+10     	; 0x1768 <GPIO_setupPortDirection+0x3e>
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9c 81       	ldd	r25, Y+4	; 0x04
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	61 f0       	breq	.+24     	; 0x177e <GPIO_setupPortDirection+0x54>
    1766:	1e c0       	rjmp	.+60     	; 0x17a4 <GPIO_setupPortDirection+0x7a>
    1768:	2b 81       	ldd	r18, Y+3	; 0x03
    176a:	3c 81       	ldd	r19, Y+4	; 0x04
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	81 f0       	breq	.+32     	; 0x1792 <GPIO_setupPortDirection+0x68>
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	91 05       	cpc	r25, r1
    177a:	81 f0       	breq	.+32     	; 0x179c <GPIO_setupPortDirection+0x72>
    177c:	13 c0       	rjmp	.+38     	; 0x17a4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    177e:	ea e3       	ldi	r30, 0x3A	; 58
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	80 83       	st	Z, r24
    1786:	0e c0       	rjmp	.+28     	; 0x17a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1788:	e7 e3       	ldi	r30, 0x37	; 55
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	80 83       	st	Z, r24
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1792:	e4 e3       	ldi	r30, 0x34	; 52
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	80 83       	st	Z, r24
    179a:	04 c0       	rjmp	.+8      	; 0x17a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    179c:	e1 e3       	ldi	r30, 0x31	; 49
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	80 83       	st	Z, r24
			break;
		}
	}
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <GPIO_writePort+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <GPIO_writePort+0x8>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	90 f5       	brcc	.+100    	; 0x182c <GPIO_writePort+0x7a>
		{
			/* Do Nothing */
		}
	else
		{
			switch(port_num)
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3c 83       	std	Y+4, r19	; 0x04
    17d0:	2b 83       	std	Y+3, r18	; 0x03
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	91 05       	cpc	r25, r1
    17da:	d1 f0       	breq	.+52     	; 0x1810 <GPIO_writePort+0x5e>
    17dc:	2b 81       	ldd	r18, Y+3	; 0x03
    17de:	3c 81       	ldd	r19, Y+4	; 0x04
    17e0:	22 30       	cpi	r18, 0x02	; 2
    17e2:	31 05       	cpc	r19, r1
    17e4:	2c f4       	brge	.+10     	; 0x17f0 <GPIO_writePort+0x3e>
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	61 f0       	breq	.+24     	; 0x1806 <GPIO_writePort+0x54>
    17ee:	1e c0       	rjmp	.+60     	; 0x182c <GPIO_writePort+0x7a>
    17f0:	2b 81       	ldd	r18, Y+3	; 0x03
    17f2:	3c 81       	ldd	r19, Y+4	; 0x04
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	81 f0       	breq	.+32     	; 0x181a <GPIO_writePort+0x68>
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	83 30       	cpi	r24, 0x03	; 3
    1800:	91 05       	cpc	r25, r1
    1802:	81 f0       	breq	.+32     	; 0x1824 <GPIO_writePort+0x72>
    1804:	13 c0       	rjmp	.+38     	; 0x182c <GPIO_writePort+0x7a>
			{
			case PORTA_ID:
				PORTA = value;
    1806:	eb e3       	ldi	r30, 0x3B	; 59
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	80 83       	st	Z, r24
    180e:	0e c0       	rjmp	.+28     	; 0x182c <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB = value;
    1810:	e8 e3       	ldi	r30, 0x38	; 56
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	80 83       	st	Z, r24
    1818:	09 c0       	rjmp	.+18     	; 0x182c <GPIO_writePort+0x7a>
				break;
			case PORTC_ID:
				PORTC = value;
    181a:	e5 e3       	ldi	r30, 0x35	; 53
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	80 83       	st	Z, r24
    1822:	04 c0       	rjmp	.+8      	; 0x182c <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD = value;
    1824:	e2 e3       	ldi	r30, 0x32	; 50
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	80 83       	st	Z, r24
				break;
			}
		}

}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	00 d0       	rcall	.+0      	; 0x1840 <GPIO_readPort+0x6>
    1840:	00 d0       	rcall	.+0      	; 0x1842 <GPIO_readPort+0x8>
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	89 83       	std	Y+1, r24	; 0x01
			if(port_num >= NUM_OF_PORTS)
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	98 f5       	brcc	.+102    	; 0x18b4 <GPIO_readPort+0x7a>
			{
				/*do nothing*/
			}
			else
			{
				switch(port_num)
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3c 83       	std	Y+4, r19	; 0x04
    1856:	2b 83       	std	Y+3, r18	; 0x03
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	91 05       	cpc	r25, r1
    1860:	d1 f0       	breq	.+52     	; 0x1896 <GPIO_readPort+0x5c>
    1862:	2b 81       	ldd	r18, Y+3	; 0x03
    1864:	3c 81       	ldd	r19, Y+4	; 0x04
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	2c f4       	brge	.+10     	; 0x1876 <GPIO_readPort+0x3c>
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	61 f0       	breq	.+24     	; 0x188c <GPIO_readPort+0x52>
    1874:	1f c0       	rjmp	.+62     	; 0x18b4 <GPIO_readPort+0x7a>
    1876:	2b 81       	ldd	r18, Y+3	; 0x03
    1878:	3c 81       	ldd	r19, Y+4	; 0x04
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	81 f0       	breq	.+32     	; 0x18a0 <GPIO_readPort+0x66>
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	81 f0       	breq	.+32     	; 0x18aa <GPIO_readPort+0x70>
    188a:	14 c0       	rjmp	.+40     	; 0x18b4 <GPIO_readPort+0x7a>
				{
				case PORTA_ID:
					return PINA;
    188c:	e9 e3       	ldi	r30, 0x39	; 57
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	90 81       	ld	r25, Z
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	10 c0       	rjmp	.+32     	; 0x18b6 <GPIO_readPort+0x7c>
					break;
				case PORTB_ID:
					return PINB;
    1896:	e6 e3       	ldi	r30, 0x36	; 54
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	20 81       	ld	r18, Z
    189c:	2a 83       	std	Y+2, r18	; 0x02
    189e:	0b c0       	rjmp	.+22     	; 0x18b6 <GPIO_readPort+0x7c>
					break;
				case PORTC_ID:
					return PINC;
    18a0:	e3 e3       	ldi	r30, 0x33	; 51
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	30 81       	ld	r19, Z
    18a6:	3a 83       	std	Y+2, r19	; 0x02
    18a8:	06 c0       	rjmp	.+12     	; 0x18b6 <GPIO_readPort+0x7c>
					break;
				case PORTD_ID:
					return PIND;
    18aa:	e0 e3       	ldi	r30, 0x30	; 48
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	8a 83       	std	Y+2, r24	; 0x02
    18b2:	01 c0       	rjmp	.+2      	; 0x18b6 <GPIO_readPort+0x7c>
					break;
				}
			}
	return LOGIC_LOW;
    18b4:	1a 82       	std	Y+2, r1	; 0x02
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <LCD_init>:
#include "lcd.h"
#include <util/delay.h>
#include "common_macros.h" /* For GET_BIT Macro */

void LCD_init(void)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	2e 97       	sbiw	r28, 0x0e	; 14
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
	/*for RW*/
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    18da:	83 e0       	ldi	r24, 0x03	; 3
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	0e 94 22 09 	call	0x1244	; 0x1244 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);/*a it is connected to  ground*/
    18e4:	83 e0       	ldi	r24, 0x03	; 3
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    18ee:	83 e0       	ldi	r24, 0x03	; 3
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	41 e0       	ldi	r20, 0x01	; 1
    18f4:	0e 94 22 09 	call	0x1244	; 0x1244 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    18f8:	83 e0       	ldi	r24, 0x03	; 3
    18fa:	62 e0       	ldi	r22, 0x02	; 2
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	0e 94 22 09 	call	0x1244	; 0x1244 <GPIO_setupPinDirection>
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a0 ea       	ldi	r26, 0xA0	; 160
    1908:	b1 e4       	ldi	r27, 0x41	; 65
    190a:	8b 87       	std	Y+11, r24	; 0x0b
    190c:	9c 87       	std	Y+12, r25	; 0x0c
    190e:	ad 87       	std	Y+13, r26	; 0x0d
    1910:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1912:	6b 85       	ldd	r22, Y+11	; 0x0b
    1914:	7c 85       	ldd	r23, Y+12	; 0x0c
    1916:	8d 85       	ldd	r24, Y+13	; 0x0d
    1918:	9e 85       	ldd	r25, Y+14	; 0x0e
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	4a e7       	ldi	r20, 0x7A	; 122
    1920:	53 e4       	ldi	r21, 0x43	; 67
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	8f 83       	std	Y+7, r24	; 0x07
    192c:	98 87       	std	Y+8, r25	; 0x08
    192e:	a9 87       	std	Y+9, r26	; 0x09
    1930:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1932:	6f 81       	ldd	r22, Y+7	; 0x07
    1934:	78 85       	ldd	r23, Y+8	; 0x08
    1936:	89 85       	ldd	r24, Y+9	; 0x09
    1938:	9a 85       	ldd	r25, Y+10	; 0x0a
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e8       	ldi	r20, 0x80	; 128
    1940:	5f e3       	ldi	r21, 0x3F	; 63
    1942:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1946:	88 23       	and	r24, r24
    1948:	2c f4       	brge	.+10     	; 0x1954 <LCD_init+0x8e>
		__ticks = 1;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9e 83       	std	Y+6, r25	; 0x06
    1950:	8d 83       	std	Y+5, r24	; 0x05
    1952:	3f c0       	rjmp	.+126    	; 0x19d2 <LCD_init+0x10c>
	else if (__tmp > 65535)
    1954:	6f 81       	ldd	r22, Y+7	; 0x07
    1956:	78 85       	ldd	r23, Y+8	; 0x08
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	9a 85       	ldd	r25, Y+10	; 0x0a
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	3f ef       	ldi	r19, 0xFF	; 255
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	57 e4       	ldi	r21, 0x47	; 71
    1964:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1968:	18 16       	cp	r1, r24
    196a:	4c f5       	brge	.+82     	; 0x19be <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196c:	6b 85       	ldd	r22, Y+11	; 0x0b
    196e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1970:	8d 85       	ldd	r24, Y+13	; 0x0d
    1972:	9e 85       	ldd	r25, Y+14	; 0x0e
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e2       	ldi	r20, 0x20	; 32
    197a:	51 e4       	ldi	r21, 0x41	; 65
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9e 83       	std	Y+6, r25	; 0x06
    1992:	8d 83       	std	Y+5, r24	; 0x05
    1994:	0f c0       	rjmp	.+30     	; 0x19b4 <LCD_init+0xee>
    1996:	89 e1       	ldi	r24, 0x19	; 25
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <LCD_init+0xdc>
    19a6:	9c 83       	std	Y+4, r25	; 0x04
    19a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	69 f7       	brne	.-38     	; 0x1996 <LCD_init+0xd0>
    19bc:	14 c0       	rjmp	.+40     	; 0x19e6 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19be:	6f 81       	ldd	r22, Y+7	; 0x07
    19c0:	78 85       	ldd	r23, Y+8	; 0x08
    19c2:	89 85       	ldd	r24, Y+9	; 0x09
    19c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	9e 81       	ldd	r25, Y+6	; 0x06
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <LCD_init+0x118>
    19e2:	9a 83       	std	Y+2, r25	; 0x02
    19e4:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	6f ef       	ldi	r22, 0xFF	; 255
    19ea:	0e 94 95 0b 	call	0x172a	; 0x172a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    19ee:	88 e3       	ldi	r24, 0x38	; 56
    19f0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    19f4:	8c e0       	ldi	r24, 0x0C	; 12
    19f6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_sendCommand>
}
    1a00:	2e 96       	adiw	r28, 0x0e	; 14
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <LCD_sendCommand>:


void LCD_sendCommand(uint8 command){
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	e9 97       	sbiw	r28, 0x39	; 57
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a0 e8       	ldi	r26, 0x80	; 128
    1a38:	bf e3       	ldi	r27, 0x3F	; 63
    1a3a:	8d ab       	std	Y+53, r24	; 0x35
    1a3c:	9e ab       	std	Y+54, r25	; 0x36
    1a3e:	af ab       	std	Y+55, r26	; 0x37
    1a40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a42:	6d a9       	ldd	r22, Y+53	; 0x35
    1a44:	7e a9       	ldd	r23, Y+54	; 0x36
    1a46:	8f a9       	ldd	r24, Y+55	; 0x37
    1a48:	98 ad       	ldd	r25, Y+56	; 0x38
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a e7       	ldi	r20, 0x7A	; 122
    1a50:	53 e4       	ldi	r21, 0x43	; 67
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	89 ab       	std	Y+49, r24	; 0x31
    1a5c:	9a ab       	std	Y+50, r25	; 0x32
    1a5e:	ab ab       	std	Y+51, r26	; 0x33
    1a60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a62:	69 a9       	ldd	r22, Y+49	; 0x31
    1a64:	7a a9       	ldd	r23, Y+50	; 0x32
    1a66:	8b a9       	ldd	r24, Y+51	; 0x33
    1a68:	9c a9       	ldd	r25, Y+52	; 0x34
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <LCD_sendCommand+0x72>
		__ticks = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	98 ab       	std	Y+48, r25	; 0x30
    1a80:	8f a7       	std	Y+47, r24	; 0x2f
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1a84:	69 a9       	ldd	r22, Y+49	; 0x31
    1a86:	7a a9       	ldd	r23, Y+50	; 0x32
    1a88:	8b a9       	ldd	r24, Y+51	; 0x33
    1a8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	4c f5       	brge	.+82     	; 0x1aee <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a9e:	7e a9       	ldd	r23, Y+54	; 0x36
    1aa0:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa2:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	98 ab       	std	Y+48, r25	; 0x30
    1ac2:	8f a7       	std	Y+47, r24	; 0x2f
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <LCD_sendCommand+0xd2>
    1ac6:	89 e1       	ldi	r24, 0x19	; 25
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9e a7       	std	Y+46, r25	; 0x2e
    1acc:	8d a7       	std	Y+45, r24	; 0x2d
    1ace:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ad0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <LCD_sendCommand+0xc0>
    1ad6:	9e a7       	std	Y+46, r25	; 0x2e
    1ad8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	8f a5       	ldd	r24, Y+47	; 0x2f
    1adc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	98 ab       	std	Y+48, r25	; 0x30
    1ae2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	69 f7       	brne	.-38     	; 0x1ac6 <LCD_sendCommand+0xb4>
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aee:	69 a9       	ldd	r22, Y+49	; 0x31
    1af0:	7a a9       	ldd	r23, Y+50	; 0x32
    1af2:	8b a9       	ldd	r24, Y+51	; 0x33
    1af4:	9c a9       	ldd	r25, Y+52	; 0x34
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	98 ab       	std	Y+48, r25	; 0x30
    1b00:	8f a7       	std	Y+47, r24	; 0x2f
    1b02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b04:	98 a9       	ldd	r25, Y+48	; 0x30
    1b06:	9c a7       	std	Y+44, r25	; 0x2c
    1b08:	8b a7       	std	Y+43, r24	; 0x2b
    1b0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_sendCommand+0xfc>
    1b12:	9c a7       	std	Y+44, r25	; 0x2c
    1b14:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Tas = 50ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b16:	83 e0       	ldi	r24, 0x03	; 3
    1b18:	62 e0       	ldi	r22, 0x02	; 2
    1b1a:	41 e0       	ldi	r20, 0x01	; 1
    1b1c:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a0 e8       	ldi	r26, 0x80	; 128
    1b26:	bf e3       	ldi	r27, 0x3F	; 63
    1b28:	8f a3       	std	Y+39, r24	; 0x27
    1b2a:	98 a7       	std	Y+40, r25	; 0x28
    1b2c:	a9 a7       	std	Y+41, r26	; 0x29
    1b2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b30:	6f a1       	ldd	r22, Y+39	; 0x27
    1b32:	78 a5       	ldd	r23, Y+40	; 0x28
    1b34:	89 a5       	ldd	r24, Y+41	; 0x29
    1b36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	4a e7       	ldi	r20, 0x7A	; 122
    1b3e:	53 e4       	ldi	r21, 0x43	; 67
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8b a3       	std	Y+35, r24	; 0x23
    1b4a:	9c a3       	std	Y+36, r25	; 0x24
    1b4c:	ad a3       	std	Y+37, r26	; 0x25
    1b4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b50:	6b a1       	ldd	r22, Y+35	; 0x23
    1b52:	7c a1       	ldd	r23, Y+36	; 0x24
    1b54:	8d a1       	ldd	r24, Y+37	; 0x25
    1b56:	9e a1       	ldd	r25, Y+38	; 0x26
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <LCD_sendCommand+0x160>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9a a3       	std	Y+34, r25	; 0x22
    1b6e:	89 a3       	std	Y+33, r24	; 0x21
    1b70:	3f c0       	rjmp	.+126    	; 0x1bf0 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1b72:	6b a1       	ldd	r22, Y+35	; 0x23
    1b74:	7c a1       	ldd	r23, Y+36	; 0x24
    1b76:	8d a1       	ldd	r24, Y+37	; 0x25
    1b78:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	57 e4       	ldi	r21, 0x47	; 71
    1b82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	4c f5       	brge	.+82     	; 0x1bdc <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b8c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e2       	ldi	r20, 0x20	; 32
    1b98:	51 e4       	ldi	r21, 0x41	; 65
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9a a3       	std	Y+34, r25	; 0x22
    1bb0:	89 a3       	std	Y+33, r24	; 0x21
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <LCD_sendCommand+0x1c0>
    1bb4:	89 e1       	ldi	r24, 0x19	; 25
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	98 a3       	std	Y+32, r25	; 0x20
    1bba:	8f 8f       	std	Y+31, r24	; 0x1f
    1bbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bbe:	98 a1       	ldd	r25, Y+32	; 0x20
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_sendCommand+0x1ae>
    1bc4:	98 a3       	std	Y+32, r25	; 0x20
    1bc6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bca:	9a a1       	ldd	r25, Y+34	; 0x22
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	9a a3       	std	Y+34, r25	; 0x22
    1bd0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	69 f7       	brne	.-38     	; 0x1bb4 <LCD_sendCommand+0x1a2>
    1bda:	14 c0       	rjmp	.+40     	; 0x1c04 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bde:	7c a1       	ldd	r23, Y+36	; 0x24
    1be0:	8d a1       	ldd	r24, Y+37	; 0x25
    1be2:	9e a1       	ldd	r25, Y+38	; 0x26
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9a a3       	std	Y+34, r25	; 0x22
    1bee:	89 a3       	std	Y+33, r24	; 0x21
    1bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf4:	9e 8f       	std	Y+30, r25	; 0x1e
    1bf6:	8d 8f       	std	Y+29, r24	; 0x1d
    1bf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_sendCommand+0x1ea>
    1c00:	9e 8f       	std	Y+30, r25	; 0x1e
    1c02:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	69 ad       	ldd	r22, Y+57	; 0x39
    1c08:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_writePort>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e8       	ldi	r26, 0x80	; 128
    1c12:	bf e3       	ldi	r27, 0x3F	; 63
    1c14:	89 8f       	std	Y+25, r24	; 0x19
    1c16:	9a 8f       	std	Y+26, r25	; 0x1a
    1c18:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a e7       	ldi	r20, 0x7A	; 122
    1c2a:	53 e4       	ldi	r21, 0x43	; 67
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8d 8b       	std	Y+21, r24	; 0x15
    1c36:	9e 8b       	std	Y+22, r25	; 0x16
    1c38:	af 8b       	std	Y+23, r26	; 0x17
    1c3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c40:	8f 89       	ldd	r24, Y+23	; 0x17
    1c42:	98 8d       	ldd	r25, Y+24	; 0x18
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <LCD_sendCommand+0x24c>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9c 8b       	std	Y+20, r25	; 0x14
    1c5a:	8b 8b       	std	Y+19, r24	; 0x13
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c60:	7e 89       	ldd	r23, Y+22	; 0x16
    1c62:	8f 89       	ldd	r24, Y+23	; 0x17
    1c64:	98 8d       	ldd	r25, Y+24	; 0x18
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	69 8d       	ldd	r22, Y+25	; 0x19
    1c78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9c 8b       	std	Y+20, r25	; 0x14
    1c9c:	8b 8b       	std	Y+19, r24	; 0x13
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <LCD_sendCommand+0x2ac>
    1ca0:	89 e1       	ldi	r24, 0x19	; 25
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9a 8b       	std	Y+18, r25	; 0x12
    1ca6:	89 8b       	std	Y+17, r24	; 0x11
    1ca8:	89 89       	ldd	r24, Y+17	; 0x11
    1caa:	9a 89       	ldd	r25, Y+18	; 0x12
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_sendCommand+0x29a>
    1cb0:	9a 8b       	std	Y+18, r25	; 0x12
    1cb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	9c 8b       	std	Y+20, r25	; 0x14
    1cbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <LCD_sendCommand+0x28e>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cca:	7e 89       	ldd	r23, Y+22	; 0x16
    1ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cce:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9c 8b       	std	Y+20, r25	; 0x14
    1cda:	8b 8b       	std	Y+19, r24	; 0x13
    1cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cde:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce0:	98 8b       	std	Y+16, r25	; 0x10
    1ce2:	8f 87       	std	Y+15, r24	; 0x0f
    1ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce6:	98 89       	ldd	r25, Y+16	; 0x10
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_sendCommand+0x2d6>
    1cec:	98 8b       	std	Y+16, r25	; 0x10
    1cee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cf0:	83 e0       	ldi	r24, 0x03	; 3
    1cf2:	62 e0       	ldi	r22, 0x02	; 2
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a0 e8       	ldi	r26, 0x80	; 128
    1d00:	bf e3       	ldi	r27, 0x3F	; 63
    1d02:	8b 87       	std	Y+11, r24	; 0x0b
    1d04:	9c 87       	std	Y+12, r25	; 0x0c
    1d06:	ad 87       	std	Y+13, r26	; 0x0d
    1d08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4a e7       	ldi	r20, 0x7A	; 122
    1d18:	53 e4       	ldi	r21, 0x43	; 67
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8f 83       	std	Y+7, r24	; 0x07
    1d24:	98 87       	std	Y+8, r25	; 0x08
    1d26:	a9 87       	std	Y+9, r26	; 0x09
    1d28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e8       	ldi	r20, 0x80	; 128
    1d38:	5f e3       	ldi	r21, 0x3F	; 63
    1d3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d3e:	88 23       	and	r24, r24
    1d40:	2c f4       	brge	.+10     	; 0x1d4c <LCD_sendCommand+0x33a>
		__ticks = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9e 83       	std	Y+6, r25	; 0x06
    1d48:	8d 83       	std	Y+5, r24	; 0x05
    1d4a:	3f c0       	rjmp	.+126    	; 0x1dca <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4e:	78 85       	ldd	r23, Y+8	; 0x08
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	57 e4       	ldi	r21, 0x47	; 71
    1d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	4c f5       	brge	.+82     	; 0x1db6 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e2       	ldi	r20, 0x20	; 32
    1d72:	51 e4       	ldi	r21, 0x41	; 65
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <LCD_sendCommand+0x39a>
    1d8e:	89 e1       	ldi	r24, 0x19	; 25
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	8b 83       	std	Y+3, r24	; 0x03
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_sendCommand+0x388>
    1d9e:	9c 83       	std	Y+4, r25	; 0x04
    1da0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da2:	8d 81       	ldd	r24, Y+5	; 0x05
    1da4:	9e 81       	ldd	r25, Y+6	; 0x06
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	9e 81       	ldd	r25, Y+6	; 0x06
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	69 f7       	brne	.-38     	; 0x1d8e <LCD_sendCommand+0x37c>
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db6:	6f 81       	ldd	r22, Y+7	; 0x07
    1db8:	78 85       	ldd	r23, Y+8	; 0x08
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9e 83       	std	Y+6, r25	; 0x06
    1dc8:	8d 83       	std	Y+5, r24	; 0x05
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_sendCommand+0x3c4>
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1dde:	e9 96       	adiw	r28, 0x39	; 57
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <LCD_displayCharacter>:

/**Display the on;y only character on the screen*/
void LCD_displayCharacter(uint8 data){
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	e9 97       	sbiw	r28, 0x39	; 57
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	41 e0       	ldi	r20, 0x01	; 1
    1e0c:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	a0 e8       	ldi	r26, 0x80	; 128
    1e16:	bf e3       	ldi	r27, 0x3F	; 63
    1e18:	8d ab       	std	Y+53, r24	; 0x35
    1e1a:	9e ab       	std	Y+54, r25	; 0x36
    1e1c:	af ab       	std	Y+55, r26	; 0x37
    1e1e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e20:	6d a9       	ldd	r22, Y+53	; 0x35
    1e22:	7e a9       	ldd	r23, Y+54	; 0x36
    1e24:	8f a9       	ldd	r24, Y+55	; 0x37
    1e26:	98 ad       	ldd	r25, Y+56	; 0x38
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a e7       	ldi	r20, 0x7A	; 122
    1e2e:	53 e4       	ldi	r21, 0x43	; 67
    1e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	89 ab       	std	Y+49, r24	; 0x31
    1e3a:	9a ab       	std	Y+50, r25	; 0x32
    1e3c:	ab ab       	std	Y+51, r26	; 0x33
    1e3e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e40:	69 a9       	ldd	r22, Y+49	; 0x31
    1e42:	7a a9       	ldd	r23, Y+50	; 0x32
    1e44:	8b a9       	ldd	r24, Y+51	; 0x33
    1e46:	9c a9       	ldd	r25, Y+52	; 0x34
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	98 ab       	std	Y+48, r25	; 0x30
    1e5e:	8f a7       	std	Y+47, r24	; 0x2f
    1e60:	3f c0       	rjmp	.+126    	; 0x1ee0 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1e62:	69 a9       	ldd	r22, Y+49	; 0x31
    1e64:	7a a9       	ldd	r23, Y+50	; 0x32
    1e66:	8b a9       	ldd	r24, Y+51	; 0x33
    1e68:	9c a9       	ldd	r25, Y+52	; 0x34
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	4c f5       	brge	.+82     	; 0x1ecc <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e7c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e7e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e80:	98 ad       	ldd	r25, Y+56	; 0x38
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	98 ab       	std	Y+48, r25	; 0x30
    1ea0:	8f a7       	std	Y+47, r24	; 0x2f
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <LCD_displayCharacter+0xd2>
    1ea4:	89 e1       	ldi	r24, 0x19	; 25
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9e a7       	std	Y+46, r25	; 0x2e
    1eaa:	8d a7       	std	Y+45, r24	; 0x2d
    1eac:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eae:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_displayCharacter+0xc0>
    1eb4:	9e a7       	std	Y+46, r25	; 0x2e
    1eb6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eba:	98 a9       	ldd	r25, Y+48	; 0x30
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	98 ab       	std	Y+48, r25	; 0x30
    1ec0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <LCD_displayCharacter+0xb4>
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ecc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ece:	7a a9       	ldd	r23, Y+50	; 0x32
    1ed0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ed2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	98 ab       	std	Y+48, r25	; 0x30
    1ede:	8f a7       	std	Y+47, r24	; 0x2f
    1ee0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee4:	9c a7       	std	Y+44, r25	; 0x2c
    1ee6:	8b a7       	std	Y+43, r24	; 0x2b
    1ee8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eea:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <LCD_displayCharacter+0xfc>
    1ef0:	9c a7       	std	Y+44, r25	; 0x2c
    1ef2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Tas = 50ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ef4:	83 e0       	ldi	r24, 0x03	; 3
    1ef6:	62 e0       	ldi	r22, 0x02	; 2
    1ef8:	41 e0       	ldi	r20, 0x01	; 1
    1efa:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a0 e8       	ldi	r26, 0x80	; 128
    1f04:	bf e3       	ldi	r27, 0x3F	; 63
    1f06:	8f a3       	std	Y+39, r24	; 0x27
    1f08:	98 a7       	std	Y+40, r25	; 0x28
    1f0a:	a9 a7       	std	Y+41, r26	; 0x29
    1f0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f10:	78 a5       	ldd	r23, Y+40	; 0x28
    1f12:	89 a5       	ldd	r24, Y+41	; 0x29
    1f14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a e7       	ldi	r20, 0x7A	; 122
    1f1c:	53 e4       	ldi	r21, 0x43	; 67
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	8b a3       	std	Y+35, r24	; 0x23
    1f28:	9c a3       	std	Y+36, r25	; 0x24
    1f2a:	ad a3       	std	Y+37, r26	; 0x25
    1f2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f30:	7c a1       	ldd	r23, Y+36	; 0x24
    1f32:	8d a1       	ldd	r24, Y+37	; 0x25
    1f34:	9e a1       	ldd	r25, Y+38	; 0x26
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9a a3       	std	Y+34, r25	; 0x22
    1f4c:	89 a3       	std	Y+33, r24	; 0x21
    1f4e:	3f c0       	rjmp	.+126    	; 0x1fce <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1f50:	6b a1       	ldd	r22, Y+35	; 0x23
    1f52:	7c a1       	ldd	r23, Y+36	; 0x24
    1f54:	8d a1       	ldd	r24, Y+37	; 0x25
    1f56:	9e a1       	ldd	r25, Y+38	; 0x26
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	57 e4       	ldi	r21, 0x47	; 71
    1f60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f64:	18 16       	cp	r1, r24
    1f66:	4c f5       	brge	.+82     	; 0x1fba <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f68:	6f a1       	ldd	r22, Y+39	; 0x27
    1f6a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f6c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9a a3       	std	Y+34, r25	; 0x22
    1f8e:	89 a3       	std	Y+33, r24	; 0x21
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <LCD_displayCharacter+0x1c0>
    1f92:	89 e1       	ldi	r24, 0x19	; 25
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	98 a3       	std	Y+32, r25	; 0x20
    1f98:	8f 8f       	std	Y+31, r24	; 0x1f
    1f9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f9c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_displayCharacter+0x1ae>
    1fa2:	98 a3       	std	Y+32, r25	; 0x20
    1fa4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa8:	9a a1       	ldd	r25, Y+34	; 0x22
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	9a a3       	std	Y+34, r25	; 0x22
    1fae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f7       	brne	.-38     	; 0x1f92 <LCD_displayCharacter+0x1a2>
    1fb8:	14 c0       	rjmp	.+40     	; 0x1fe2 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	6b a1       	ldd	r22, Y+35	; 0x23
    1fbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1fbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9a a3       	std	Y+34, r25	; 0x22
    1fcc:	89 a3       	std	Y+33, r24	; 0x21
    1fce:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd2:	9e 8f       	std	Y+30, r25	; 0x1e
    1fd4:	8d 8f       	std	Y+29, r24	; 0x1d
    1fd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_displayCharacter+0x1ea>
    1fde:	9e 8f       	std	Y+30, r25	; 0x1e
    1fe0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */

	#elif(LCD_DATA_BITS_MODE == 8)
		GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
    1fe4:	69 ad       	ldd	r22, Y+57	; 0x39
    1fe6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_writePort>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e8       	ldi	r26, 0x80	; 128
    1ff0:	bf e3       	ldi	r27, 0x3F	; 63
    1ff2:	89 8f       	std	Y+25, r24	; 0x19
    1ff4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ff6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ff8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ffe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2000:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a e7       	ldi	r20, 0x7A	; 122
    2008:	53 e4       	ldi	r21, 0x43	; 67
    200a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8d 8b       	std	Y+21, r24	; 0x15
    2014:	9e 8b       	std	Y+22, r25	; 0x16
    2016:	af 8b       	std	Y+23, r26	; 0x17
    2018:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    201a:	6d 89       	ldd	r22, Y+21	; 0x15
    201c:	7e 89       	ldd	r23, Y+22	; 0x16
    201e:	8f 89       	ldd	r24, Y+23	; 0x17
    2020:	98 8d       	ldd	r25, Y+24	; 0x18
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9c 8b       	std	Y+20, r25	; 0x14
    2038:	8b 8b       	std	Y+19, r24	; 0x13
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    203c:	6d 89       	ldd	r22, Y+21	; 0x15
    203e:	7e 89       	ldd	r23, Y+22	; 0x16
    2040:	8f 89       	ldd	r24, Y+23	; 0x17
    2042:	98 8d       	ldd	r25, Y+24	; 0x18
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	69 8d       	ldd	r22, Y+25	; 0x19
    2056:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9c 8b       	std	Y+20, r25	; 0x14
    207a:	8b 8b       	std	Y+19, r24	; 0x13
    207c:	0f c0       	rjmp	.+30     	; 0x209c <LCD_displayCharacter+0x2ac>
    207e:	89 e1       	ldi	r24, 0x19	; 25
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9a 8b       	std	Y+18, r25	; 0x12
    2084:	89 8b       	std	Y+17, r24	; 0x11
    2086:	89 89       	ldd	r24, Y+17	; 0x11
    2088:	9a 89       	ldd	r25, Y+18	; 0x12
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_displayCharacter+0x29a>
    208e:	9a 8b       	std	Y+18, r25	; 0x12
    2090:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	8b 89       	ldd	r24, Y+19	; 0x13
    2094:	9c 89       	ldd	r25, Y+20	; 0x14
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9c 8b       	std	Y+20, r25	; 0x14
    209a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	8b 89       	ldd	r24, Y+19	; 0x13
    209e:	9c 89       	ldd	r25, Y+20	; 0x14
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <LCD_displayCharacter+0x28e>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6d 89       	ldd	r22, Y+21	; 0x15
    20a8:	7e 89       	ldd	r23, Y+22	; 0x16
    20aa:	8f 89       	ldd	r24, Y+23	; 0x17
    20ac:	98 8d       	ldd	r25, Y+24	; 0x18
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9c 8b       	std	Y+20, r25	; 0x14
    20b8:	8b 8b       	std	Y+19, r24	; 0x13
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	98 8b       	std	Y+16, r25	; 0x10
    20c0:	8f 87       	std	Y+15, r24	; 0x0f
    20c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c4:	98 89       	ldd	r25, Y+16	; 0x10
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_displayCharacter+0x2d6>
    20ca:	98 8b       	std	Y+16, r25	; 0x10
    20cc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	62 e0       	ldi	r22, 0x02	; 2
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a0 e8       	ldi	r26, 0x80	; 128
    20de:	bf e3       	ldi	r27, 0x3F	; 63
    20e0:	8b 87       	std	Y+11, r24	; 0x0b
    20e2:	9c 87       	std	Y+12, r25	; 0x0c
    20e4:	ad 87       	std	Y+13, r26	; 0x0d
    20e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	4a e7       	ldi	r20, 0x7A	; 122
    20f6:	53 e4       	ldi	r21, 0x43	; 67
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	8f 83       	std	Y+7, r24	; 0x07
    2102:	98 87       	std	Y+8, r25	; 0x08
    2104:	a9 87       	std	Y+9, r26	; 0x09
    2106:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2108:	6f 81       	ldd	r22, Y+7	; 0x07
    210a:	78 85       	ldd	r23, Y+8	; 0x08
    210c:	89 85       	ldd	r24, Y+9	; 0x09
    210e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211c:	88 23       	and	r24, r24
    211e:	2c f4       	brge	.+10     	; 0x212a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	3f c0       	rjmp	.+126    	; 0x21a8 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    212a:	6f 81       	ldd	r22, Y+7	; 0x07
    212c:	78 85       	ldd	r23, Y+8	; 0x08
    212e:	89 85       	ldd	r24, Y+9	; 0x09
    2130:	9a 85       	ldd	r25, Y+10	; 0x0a
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	57 e4       	ldi	r21, 0x47	; 71
    213a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213e:	18 16       	cp	r1, r24
    2140:	4c f5       	brge	.+82     	; 0x2194 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2142:	6b 85       	ldd	r22, Y+11	; 0x0b
    2144:	7c 85       	ldd	r23, Y+12	; 0x0c
    2146:	8d 85       	ldd	r24, Y+13	; 0x0d
    2148:	9e 85       	ldd	r25, Y+14	; 0x0e
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e2       	ldi	r20, 0x20	; 32
    2150:	51 e4       	ldi	r21, 0x41	; 65
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
    216a:	0f c0       	rjmp	.+30     	; 0x218a <LCD_displayCharacter+0x39a>
    216c:	89 e1       	ldi	r24, 0x19	; 25
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	9c 83       	std	Y+4, r25	; 0x04
    2172:	8b 83       	std	Y+3, r24	; 0x03
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_displayCharacter+0x388>
    217c:	9c 83       	std	Y+4, r25	; 0x04
    217e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2180:	8d 81       	ldd	r24, Y+5	; 0x05
    2182:	9e 81       	ldd	r25, Y+6	; 0x06
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	69 f7       	brne	.-38     	; 0x216c <LCD_displayCharacter+0x37c>
    2192:	14 c0       	rjmp	.+40     	; 0x21bc <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2194:	6f 81       	ldd	r22, Y+7	; 0x07
    2196:	78 85       	ldd	r23, Y+8	; 0x08
    2198:	89 85       	ldd	r24, Y+9	; 0x09
    219a:	9a 85       	ldd	r25, Y+10	; 0x0a
    219c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9e 83       	std	Y+6, r25	; 0x06
    21a6:	8d 83       	std	Y+5, r24	; 0x05
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	9e 81       	ldd	r25, Y+6	; 0x06
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	9a 81       	ldd	r25, Y+2	; 0x02
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_displayCharacter+0x3c4>
    21b8:	9a 83       	std	Y+2, r25	; 0x02
    21ba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif
}
    21bc:	e9 96       	adiw	r28, 0x39	; 57
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <LCD_displayString>:
/**Display the required string on the screen*/
void LCD_displayString(const char *Str)
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <LCD_displayString+0x6>
    21d4:	0f 92       	push	r0
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	9b 83       	std	Y+3, r25	; 0x03
    21dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21de:	19 82       	std	Y+1, r1	; 0x01
    21e0:	0e c0       	rjmp	.+28     	; 0x21fe <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	9b 81       	ldd	r25, Y+3	; 0x03
    21ec:	fc 01       	movw	r30, r24
    21ee:	e2 0f       	add	r30, r18
    21f0:	f3 1f       	adc	r31, r19
    21f2:	80 81       	ld	r24, Z
    21f4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <LCD_displayCharacter>
		i++;
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	8f 5f       	subi	r24, 0xFF	; 255
    21fc:	89 83       	std	Y+1, r24	; 0x01
}
/**Display the required string on the screen*/
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	9b 81       	ldd	r25, Y+3	; 0x03
    2208:	fc 01       	movw	r30, r24
    220a:	e2 0f       	add	r30, r18
    220c:	f3 1f       	adc	r31, r19
    220e:	80 81       	ld	r24, Z
    2210:	88 23       	and	r24, r24
    2212:	39 f7       	brne	.-50     	; 0x21e2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <LCD_moveCursor+0x6>
    2226:	00 d0       	rcall	.+0      	; 0x2228 <LCD_moveCursor+0x8>
    2228:	0f 92       	push	r0
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	8a 83       	std	Y+2, r24	; 0x02
    2230:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;// the specified row and column index on the screen
	switch(row)
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	3d 83       	std	Y+5, r19	; 0x05
    223a:	2c 83       	std	Y+4, r18	; 0x04
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	9d 81       	ldd	r25, Y+5	; 0x05
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	91 05       	cpc	r25, r1
    2244:	c1 f0       	breq	.+48     	; 0x2276 <LCD_moveCursor+0x56>
    2246:	2c 81       	ldd	r18, Y+4	; 0x04
    2248:	3d 81       	ldd	r19, Y+5	; 0x05
    224a:	22 30       	cpi	r18, 0x02	; 2
    224c:	31 05       	cpc	r19, r1
    224e:	2c f4       	brge	.+10     	; 0x225a <LCD_moveCursor+0x3a>
    2250:	8c 81       	ldd	r24, Y+4	; 0x04
    2252:	9d 81       	ldd	r25, Y+5	; 0x05
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	61 f0       	breq	.+24     	; 0x2270 <LCD_moveCursor+0x50>
    2258:	19 c0       	rjmp	.+50     	; 0x228c <LCD_moveCursor+0x6c>
    225a:	2c 81       	ldd	r18, Y+4	; 0x04
    225c:	3d 81       	ldd	r19, Y+5	; 0x05
    225e:	22 30       	cpi	r18, 0x02	; 2
    2260:	31 05       	cpc	r19, r1
    2262:	69 f0       	breq	.+26     	; 0x227e <LCD_moveCursor+0x5e>
    2264:	8c 81       	ldd	r24, Y+4	; 0x04
    2266:	9d 81       	ldd	r25, Y+5	; 0x05
    2268:	83 30       	cpi	r24, 0x03	; 3
    226a:	91 05       	cpc	r25, r1
    226c:	61 f0       	breq	.+24     	; 0x2286 <LCD_moveCursor+0x66>
    226e:	0e c0       	rjmp	.+28     	; 0x228c <LCD_moveCursor+0x6c>
	{
	case 0:
		address=col;
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	0b c0       	rjmp	.+22     	; 0x228c <LCD_moveCursor+0x6c>
		break;
	case 1:
			address=col+0x40;
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	80 5c       	subi	r24, 0xC0	; 192
    227a:	89 83       	std	Y+1, r24	; 0x01
    227c:	07 c0       	rjmp	.+14     	; 0x228c <LCD_moveCursor+0x6c>
			break;
	case 2:
			address=col+0x10;
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	80 5f       	subi	r24, 0xF0	; 240
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	03 c0       	rjmp	.+6      	; 0x228c <LCD_moveCursor+0x6c>
			break;
	case 3:
			address=col+0x50;
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	80 5b       	subi	r24, 0xB0	; 176
    228a:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	/* Move the LCD cursor to this specific address */
		LCD_sendCommand(address | LCD_SET_CURSOR_LOCATION);
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	80 68       	ori	r24, 0x80	; 128
    2290:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_sendCommand>
		//LCD_SET_CURSOR_LOCATION=0x80=1000 0000
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <LCD_displayStringRowColumn>:
//show what is the string in this row and column
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <LCD_displayStringRowColumn+0x6>
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <LCD_displayStringRowColumn+0x8>
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	6a 83       	std	Y+2, r22	; 0x02
    22b4:	5c 83       	std	Y+4, r21	; 0x04
    22b6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);//move the courser to the wanted location
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	6a 81       	ldd	r22, Y+2	; 0x02
    22bc:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_moveCursor>
	LCD_displayString(Str);
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	0e 94 e7 10 	call	0x21ce	; 0x21ce <LCD_displayString>
}
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	62 97       	sbiw	r28, 0x12	; 18
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	9a 8b       	std	Y+18, r25	; 0x12
    22ec:	89 8b       	std	Y+17, r24	; 0x11
	char hold_ascii[16];//string to hold the ascii
	/*
	 * itoa(data, buff, 10);: Converts the integer data into its corresponding ASCII representation using the itoa function.
	 *  The second argument buff specifies where the resulting string will be stored,
	 *  and the third argument 10 indicates that the conversion should be in base 10 (decimal).*/
	itoa(data,hold_ascii,10);
    22ee:	89 89       	ldd	r24, Y+17	; 0x11
    22f0:	9a 89       	ldd	r25, Y+18	; 0x12
    22f2:	9e 01       	movw	r18, r28
    22f4:	2f 5f       	subi	r18, 0xFF	; 255
    22f6:	3f 4f       	sbci	r19, 0xFF	; 255
    22f8:	b9 01       	movw	r22, r18
    22fa:	4a e0       	ldi	r20, 0x0A	; 10
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	0e 94 ee 12 	call	0x25dc	; 0x25dc <itoa>
	LCD_displayString(hold_ascii); /* Display the string */
    2302:	ce 01       	movw	r24, r28
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	0e 94 e7 10 	call	0x21ce	; 0x21ce <LCD_displayString>
	}
    230a:	62 96       	adiw	r28, 0x12	; 18
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <LCD_clearScreen>:


/** Send the clear screen command*/
void LCD_clearScreen(void)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0x01); /* Send clear display command */
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_sendCommand>
}
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <DcMotor_Init>:
 */
#include "gpio.h"
#include "common_macros.h" /* To use the macros like SET_BIT */
#include "motor_mine.h"
#include "pwm_mine.h"
void DcMotor_Init(void){
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
	/*set up pin directions*/
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);/*IN1*/
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	0e 94 22 09 	call	0x1244	; 0x1244 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);/*IN2*/
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	61 e0       	ldi	r22, 0x01	; 1
    2346:	41 e0       	ldi	r20, 0x01	; 1
    2348:	0e 94 22 09 	call	0x1244	; 0x1244 <GPIO_setupPinDirection>

	/*STOP THE MOTOR AT THE BEGINING*/
	GPIO_writePin(PORTB_ID,PIN0_ID,0);/*IN1*/
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN1_ID,0);/*IN2*/
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
}
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	00 d0       	rcall	.+0      	; 0x236c <DcMotor_Rotate+0x6>
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	89 83       	std	Y+1, r24	; 0x01
    2372:	6a 83       	std	Y+2, r22	; 0x02
	if ((state==MOTOR_OFF))
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	88 23       	and	r24, r24
    2378:	71 f4       	brne	.+28     	; 0x2396 <DcMotor_Rotate+0x30>
	{
	PWM_Timer0_Start(speed);
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <PWM_Timer0_Start>
	GPIO_writePin(PORTB_ID,PIN0_ID,0);/*IN1*/
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN1_ID,0);/*IN2*/
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
    2394:	1e c0       	rjmp	.+60     	; 0x23d2 <DcMotor_Rotate+0x6c>
	}
	else
	{
	PWM_Timer0_Start(speed);
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	0e 94 ee 11 	call	0x23dc	; 0x23dc <PWM_Timer0_Start>
		if((state==MOTOR_CW)){
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	59 f4       	brne	.+22     	; 0x23b8 <DcMotor_Rotate+0x52>
			/*A(IN1)=0,   B(IN2)=1 */
			GPIO_writePin(PORTB_ID,PIN0_ID,0);/*IN1*/
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	60 e0       	ldi	r22, 0x00	; 0
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
			GPIO_writePin(PORTB_ID,PIN1_ID,1);/*IN2*/
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	61 e0       	ldi	r22, 0x01	; 1
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
    23b6:	0d c0       	rjmp	.+26     	; 0x23d2 <DcMotor_Rotate+0x6c>
		}
		else if((state==MOTOR_A_CW)){
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	82 30       	cpi	r24, 0x02	; 2
    23bc:	51 f4       	brne	.+20     	; 0x23d2 <DcMotor_Rotate+0x6c>
			/*A(IN1)=1,   B(IN2)=0 */
			GPIO_writePin(PORTB_ID,PIN0_ID,1);/*IN1*/
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
			GPIO_writePin(PORTB_ID,PIN1_ID,0);/*IN2*/
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	61 e0       	ldi	r22, 0x01	; 1
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	0e 94 0d 0a 	call	0x141a	; 0x141a <GPIO_writePin>
		}
	}
}
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <PWM_Timer0_Start>:
 *      Author: dell
 */
#include <avr/io.h>
#include "pwm_mine.h"

void PWM_Timer0_Start(uint8 duty_cycle){
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <PWM_Timer0_Start+0x6>
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	8a 83       	std	Y+2, r24	; 0x02
		TCNT0 = 0; /* Set Timer Initial Value to 0*/
    23e8:	e2 e5       	ldi	r30, 0x52	; 82
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	10 82       	st	Z, r1
		/* F CPU = 1 MHZ
		 * F PWM = 500 HZ
		 * N = 8*/
		uint8 compare_value=(duty_cycle*255)/100;
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	48 2f       	mov	r20, r24
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	ca 01       	movw	r24, r20
    23f6:	9c 01       	movw	r18, r24
    23f8:	22 0f       	add	r18, r18
    23fa:	33 1f       	adc	r19, r19
    23fc:	c9 01       	movw	r24, r18
    23fe:	96 95       	lsr	r25
    2400:	98 2f       	mov	r25, r24
    2402:	88 27       	eor	r24, r24
    2404:	97 95       	ror	r25
    2406:	87 95       	ror	r24
    2408:	82 1b       	sub	r24, r18
    240a:	93 0b       	sbc	r25, r19
    240c:	84 0f       	add	r24, r20
    240e:	95 1f       	adc	r25, r21
    2410:	24 e6       	ldi	r18, 0x64	; 100
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	b9 01       	movw	r22, r18
    2416:	0e 94 90 12 	call	0x2520	; 0x2520 <__divmodhi4>
    241a:	cb 01       	movw	r24, r22
    241c:	89 83       	std	Y+1, r24	; 0x01
		OCR0  = compare_value; /*Set Compare value*/
    241e:	ec e5       	ldi	r30, 0x5C	; 92
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	80 83       	st	Z, r24
		DDRB  = DDRB | (1<<PB3);/*EN1  output pin for PWM*/
    2426:	a7 e3       	ldi	r26, 0x37	; 55
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e7 e3       	ldi	r30, 0x37	; 55
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	88 60       	ori	r24, 0x08	; 8
    2432:	8c 93       	st	X, r24
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
		 */
		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2434:	e3 e5       	ldi	r30, 0x53	; 83
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	8a e6       	ldi	r24, 0x6A	; 106
    243a:	80 83       	st	Z, r24
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <get_temp>:

#include "temp_sensor_mine.h"
#include "adc_mine.h"


uint8 get_temp(){
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	00 d0       	rcall	.+0      	; 0x244c <get_temp+0x6>
    244c:	0f 92       	push	r0
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
	ADC_init(&desired_adc_config);
    2452:	86 e8       	ldi	r24, 0x86	; 134
    2454:	91 e0       	ldi	r25, 0x01	; 1
    2456:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>
	uint16 reading_from_adc=0;
    245a:	1b 82       	std	Y+3, r1	; 0x03
    245c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 temp=0;
    245e:	19 82       	std	Y+1, r1	; 0x01
	reading_from_adc=ADC_readChannel(SENSOR_CHANNEL_NUM);
    2460:	82 e0       	ldi	r24, 0x02	; 2
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <ADC_readChannel>
    2468:	9b 83       	std	Y+3, r25	; 0x03
    246a:	8a 83       	std	Y+2, r24	; 0x02
	temp=(uint8)(((uint32)(reading_from_adc) * (SENSOR_MAX_READING) * (ADC_REF_VOLTAGE))/(SENSOR_MAX_VALUE*ADC_MAXIMUM_VALUE));
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	9b 81       	ldd	r25, Y+3	; 0x03
    2470:	cc 01       	movw	r24, r24
    2472:	a0 e0       	ldi	r26, 0x00	; 0
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	26 e9       	ldi	r18, 0x96	; 150
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__mulsi3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	20 91 82 01 	lds	r18, 0x0182
    249a:	30 91 83 01 	lds	r19, 0x0183
    249e:	40 91 84 01 	lds	r20, 0x0184
    24a2:	50 91 85 01 	lds	r21, 0x0185
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 ed       	ldi	r19, 0xD0	; 208
    24ba:	4f eb       	ldi	r20, 0xBF	; 191
    24bc:	54 e4       	ldi	r21, 0x44	; 68
    24be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	89 83       	std	Y+1, r24	; 0x01
return temp;
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <__mulsi3>:
    24e2:	62 9f       	mul	r22, r18
    24e4:	d0 01       	movw	r26, r0
    24e6:	73 9f       	mul	r23, r19
    24e8:	f0 01       	movw	r30, r0
    24ea:	82 9f       	mul	r24, r18
    24ec:	e0 0d       	add	r30, r0
    24ee:	f1 1d       	adc	r31, r1
    24f0:	64 9f       	mul	r22, r20
    24f2:	e0 0d       	add	r30, r0
    24f4:	f1 1d       	adc	r31, r1
    24f6:	92 9f       	mul	r25, r18
    24f8:	f0 0d       	add	r31, r0
    24fa:	83 9f       	mul	r24, r19
    24fc:	f0 0d       	add	r31, r0
    24fe:	74 9f       	mul	r23, r20
    2500:	f0 0d       	add	r31, r0
    2502:	65 9f       	mul	r22, r21
    2504:	f0 0d       	add	r31, r0
    2506:	99 27       	eor	r25, r25
    2508:	72 9f       	mul	r23, r18
    250a:	b0 0d       	add	r27, r0
    250c:	e1 1d       	adc	r30, r1
    250e:	f9 1f       	adc	r31, r25
    2510:	63 9f       	mul	r22, r19
    2512:	b0 0d       	add	r27, r0
    2514:	e1 1d       	adc	r30, r1
    2516:	f9 1f       	adc	r31, r25
    2518:	bd 01       	movw	r22, r26
    251a:	cf 01       	movw	r24, r30
    251c:	11 24       	eor	r1, r1
    251e:	08 95       	ret

00002520 <__divmodhi4>:
    2520:	97 fb       	bst	r25, 7
    2522:	09 2e       	mov	r0, r25
    2524:	07 26       	eor	r0, r23
    2526:	0a d0       	rcall	.+20     	; 0x253c <__divmodhi4_neg1>
    2528:	77 fd       	sbrc	r23, 7
    252a:	04 d0       	rcall	.+8      	; 0x2534 <__divmodhi4_neg2>
    252c:	0c d0       	rcall	.+24     	; 0x2546 <__udivmodhi4>
    252e:	06 d0       	rcall	.+12     	; 0x253c <__divmodhi4_neg1>
    2530:	00 20       	and	r0, r0
    2532:	1a f4       	brpl	.+6      	; 0x253a <__divmodhi4_exit>

00002534 <__divmodhi4_neg2>:
    2534:	70 95       	com	r23
    2536:	61 95       	neg	r22
    2538:	7f 4f       	sbci	r23, 0xFF	; 255

0000253a <__divmodhi4_exit>:
    253a:	08 95       	ret

0000253c <__divmodhi4_neg1>:
    253c:	f6 f7       	brtc	.-4      	; 0x253a <__divmodhi4_exit>
    253e:	90 95       	com	r25
    2540:	81 95       	neg	r24
    2542:	9f 4f       	sbci	r25, 0xFF	; 255
    2544:	08 95       	ret

00002546 <__udivmodhi4>:
    2546:	aa 1b       	sub	r26, r26
    2548:	bb 1b       	sub	r27, r27
    254a:	51 e1       	ldi	r21, 0x11	; 17
    254c:	07 c0       	rjmp	.+14     	; 0x255c <__udivmodhi4_ep>

0000254e <__udivmodhi4_loop>:
    254e:	aa 1f       	adc	r26, r26
    2550:	bb 1f       	adc	r27, r27
    2552:	a6 17       	cp	r26, r22
    2554:	b7 07       	cpc	r27, r23
    2556:	10 f0       	brcs	.+4      	; 0x255c <__udivmodhi4_ep>
    2558:	a6 1b       	sub	r26, r22
    255a:	b7 0b       	sbc	r27, r23

0000255c <__udivmodhi4_ep>:
    255c:	88 1f       	adc	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	5a 95       	dec	r21
    2562:	a9 f7       	brne	.-22     	; 0x254e <__udivmodhi4_loop>
    2564:	80 95       	com	r24
    2566:	90 95       	com	r25
    2568:	bc 01       	movw	r22, r24
    256a:	cd 01       	movw	r24, r26
    256c:	08 95       	ret

0000256e <__prologue_saves__>:
    256e:	2f 92       	push	r2
    2570:	3f 92       	push	r3
    2572:	4f 92       	push	r4
    2574:	5f 92       	push	r5
    2576:	6f 92       	push	r6
    2578:	7f 92       	push	r7
    257a:	8f 92       	push	r8
    257c:	9f 92       	push	r9
    257e:	af 92       	push	r10
    2580:	bf 92       	push	r11
    2582:	cf 92       	push	r12
    2584:	df 92       	push	r13
    2586:	ef 92       	push	r14
    2588:	ff 92       	push	r15
    258a:	0f 93       	push	r16
    258c:	1f 93       	push	r17
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	ca 1b       	sub	r28, r26
    2598:	db 0b       	sbc	r29, r27
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	09 94       	ijmp

000025a6 <__epilogue_restores__>:
    25a6:	2a 88       	ldd	r2, Y+18	; 0x12
    25a8:	39 88       	ldd	r3, Y+17	; 0x11
    25aa:	48 88       	ldd	r4, Y+16	; 0x10
    25ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    25ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    25b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    25b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    25b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25b8:	b9 84       	ldd	r11, Y+9	; 0x09
    25ba:	c8 84       	ldd	r12, Y+8	; 0x08
    25bc:	df 80       	ldd	r13, Y+7	; 0x07
    25be:	ee 80       	ldd	r14, Y+6	; 0x06
    25c0:	fd 80       	ldd	r15, Y+5	; 0x05
    25c2:	0c 81       	ldd	r16, Y+4	; 0x04
    25c4:	1b 81       	ldd	r17, Y+3	; 0x03
    25c6:	aa 81       	ldd	r26, Y+2	; 0x02
    25c8:	b9 81       	ldd	r27, Y+1	; 0x01
    25ca:	ce 0f       	add	r28, r30
    25cc:	d1 1d       	adc	r29, r1
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	ed 01       	movw	r28, r26
    25da:	08 95       	ret

000025dc <itoa>:
    25dc:	fb 01       	movw	r30, r22
    25de:	9f 01       	movw	r18, r30
    25e0:	e8 94       	clt
    25e2:	42 30       	cpi	r20, 0x02	; 2
    25e4:	c4 f0       	brlt	.+48     	; 0x2616 <itoa+0x3a>
    25e6:	45 32       	cpi	r20, 0x25	; 37
    25e8:	b4 f4       	brge	.+44     	; 0x2616 <itoa+0x3a>
    25ea:	4a 30       	cpi	r20, 0x0A	; 10
    25ec:	29 f4       	brne	.+10     	; 0x25f8 <itoa+0x1c>
    25ee:	97 fb       	bst	r25, 7
    25f0:	1e f4       	brtc	.+6      	; 0x25f8 <itoa+0x1c>
    25f2:	90 95       	com	r25
    25f4:	81 95       	neg	r24
    25f6:	9f 4f       	sbci	r25, 0xFF	; 255
    25f8:	64 2f       	mov	r22, r20
    25fa:	77 27       	eor	r23, r23
    25fc:	0e 94 a3 12 	call	0x2546	; 0x2546 <__udivmodhi4>
    2600:	80 5d       	subi	r24, 0xD0	; 208
    2602:	8a 33       	cpi	r24, 0x3A	; 58
    2604:	0c f0       	brlt	.+2      	; 0x2608 <itoa+0x2c>
    2606:	89 5d       	subi	r24, 0xD9	; 217
    2608:	81 93       	st	Z+, r24
    260a:	cb 01       	movw	r24, r22
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	a1 f7       	brne	.-24     	; 0x25f8 <itoa+0x1c>
    2610:	16 f4       	brtc	.+4      	; 0x2616 <itoa+0x3a>
    2612:	5d e2       	ldi	r21, 0x2D	; 45
    2614:	51 93       	st	Z+, r21
    2616:	10 82       	st	Z, r1
    2618:	c9 01       	movw	r24, r18
    261a:	0c 94 0f 13 	jmp	0x261e	; 0x261e <strrev>

0000261e <strrev>:
    261e:	dc 01       	movw	r26, r24
    2620:	fc 01       	movw	r30, r24
    2622:	67 2f       	mov	r22, r23
    2624:	71 91       	ld	r23, Z+
    2626:	77 23       	and	r23, r23
    2628:	e1 f7       	brne	.-8      	; 0x2622 <strrev+0x4>
    262a:	32 97       	sbiw	r30, 0x02	; 2
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <strrev+0x18>
    262e:	7c 91       	ld	r23, X
    2630:	6d 93       	st	X+, r22
    2632:	70 83       	st	Z, r23
    2634:	62 91       	ld	r22, -Z
    2636:	ae 17       	cp	r26, r30
    2638:	bf 07       	cpc	r27, r31
    263a:	c8 f3       	brcs	.-14     	; 0x262e <strrev+0x10>
    263c:	08 95       	ret

0000263e <_exit>:
    263e:	f8 94       	cli

00002640 <__stop_program>:
    2640:	ff cf       	rjmp	.-2      	; 0x2640 <__stop_program>
